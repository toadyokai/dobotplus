"use strict";(self.webpackChunk_dobot_plus_doc=self.webpackChunk_dobot_plus_doc||[]).push([[1808],{13586:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"lua/tcp","title":"TCP/UDP","description":"This document provides an overview of the functions used for TCP and UDP communication, including how to create network objects, establish connections, read data, and send data.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/lua/05-tcp.md","sourceDirName":"lua","slug":"/lua/tcp","permalink":"/dobotplus/en/lua/tcp","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"lua","previous":{"title":"Modbus","permalink":"/dobotplus/en/lua/modbus"},"next":{"title":"End Effector","permalink":"/dobotplus/en/lua/tool"}}');var t=n(65723),i=n(78573);const l={},d="TCP/UDP",c={},a=[{value:"Instruction List",id:"instruction-list",level:2},{value:"TCP Functions",id:"tcp-functions",level:2},{value:"<code>TCPCreate</code>",id:"tcpcreate",level:3},{value:"Required Parameters:",id:"required-parameters",level:3},{value:"Reserved Ports:",id:"reserved-ports",level:3},{value:"Return Values:",id:"return-values",level:3},{value:"Example:",id:"example",level:3},{value:"<code>TCPStart</code>",id:"tcpstart",level:3},{value:"Required Parameters:",id:"required-parameters-1",level:3},{value:"Return Values:",id:"return-values-1",level:3},{value:"Example:",id:"example-1",level:3},{value:"<code>TCPRead</code>",id:"tcpread",level:3},{value:"Required Parameters:",id:"required-parameters-2",level:3},{value:"Optional Parameters:",id:"optional-parameters",level:3},{value:"Return Values:",id:"return-values-2",level:3},{value:"Example:",id:"example-2",level:3},{value:"<code>TCPWrite</code>",id:"tcpwrite",level:3},{value:"Required Parameters:",id:"required-parameters-3",level:3},{value:"Optional Parameter:",id:"optional-parameter",level:3},{value:"Return Values:",id:"return-values-3",level:3},{value:"Example:",id:"example-3",level:3},{value:"<code>TCPDestroy</code>",id:"tcpdestroy",level:3},{value:"Required Parameter:",id:"required-parameter",level:3},{value:"Return Values:",id:"return-values-4",level:3},{value:"Example:",id:"example-4",level:3},{value:"UDP Functions",id:"udp-functions",level:2},{value:"<code>UDPCreate</code>",id:"udpcreate",level:3},{value:"Required Parameters:",id:"required-parameters-4",level:3},{value:"Return Values:",id:"return-values-5",level:3},{value:"Example:",id:"example-5",level:3},{value:"<code>UDPRead</code>",id:"udpread",level:3},{value:"Required Parameter:",id:"required-parameter-1",level:3},{value:"Optional Parameters:",id:"optional-parameters-1",level:3},{value:"Return Values:",id:"return-values-6",level:3},{value:"Example:",id:"example-6",level:3},{value:"<code>UDPWrite</code>",id:"udpwrite",level:3},{value:"Required Parameters:",id:"required-parameters-5",level:3},{value:"Optional Parameter:",id:"optional-parameter-1",level:3},{value:"Return Values:",id:"return-values-7",level:3},{value:"Example:",id:"example-7",level:3}];function o(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"tcpudp",children:"TCP/UDP"})}),"\n",(0,t.jsx)(r.p,{children:"This document provides an overview of the functions used for TCP and UDP communication, including how to create network objects, establish connections, read data, and send data."}),"\n",(0,t.jsx)(r.h2,{id:"instruction-list",children:"Instruction List"}),"\n",(0,t.jsx)(r.p,{children:"The following table summarizes the functions available for TCP and UDP communication:"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Command"}),(0,t.jsx)(r.th,{children:"Function"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"TCPCreate"})}),(0,t.jsx)(r.td,{children:"Create a TCP network object"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"TCPStart"})}),(0,t.jsx)(r.td,{children:"Establish a TCP connection"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"TCPRead"})}),(0,t.jsx)(r.td,{children:"Receive data sent by the TCP peer"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"TCPWrite"})}),(0,t.jsx)(r.td,{children:"Send data to the TCP peer"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"TCPDestroy"})}),(0,t.jsx)(r.td,{children:"Disconnect TCP connection and destroy socket"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"UDPCreate"})}),(0,t.jsx)(r.td,{children:"Create a UDP network object"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"UDPRead"})}),(0,t.jsx)(r.td,{children:"Receive data sent by the UDP peer"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"UDPWrite"})}),(0,t.jsx)(r.td,{children:"Send data to the UDP peer"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"tcp-functions",children:"TCP Functions"}),"\n",(0,t.jsx)(r.h3,{id:"tcpcreate",children:(0,t.jsx)(r.code,{children:"TCPCreate"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"TCPCreate(isServer, IP, port)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nCreates a TCP network object. Only one instance can be created."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameters",children:"Required Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"isServer"}),": Boolean indicating if a server is being created (",(0,t.jsx)(r.code,{children:"true"})," for server, ",(0,t.jsx)(r.code,{children:"false"})," for client)."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"IP"}),": Server IP address. Must be in the same subnet and not conflict with the client IP address. For the server, use the robot's IP; for the client, use the peer's address."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"port"}),": Server port. Avoid using certain reserved ports as listed below."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"reserved-ports",children:"Reserved Ports:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Avoid these ports:"})," 7, 13, 22, 37, 139, 445, 502, 503, and others within the range of 0-1024 (commonly occupied by the system)."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"err"}),": ",(0,t.jsx)(r.code,{children:"0"})," indicates success, ",(0,t.jsx)(r.code,{children:"1"})," indicates failure."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'-- Creating a TCP server.\r\nlocal ip = "192.168.5.1"  -- Robot\'s IP as server IP\r\nlocal port = 6001          -- Server port\r\nlocal err, socket = TCPCreate(true, ip, port)\r\n\r\n-- Creating a TCP client.\r\nlocal ip = "192.168.5.25"  -- External device\'s IP as server IP\r\nlocal port = 6001          -- Server port\r\nlocal err, socket = TCPCreate(false, ip, port)\n'})}),"\n",(0,t.jsx)(r.h3,{id:"tcpstart",children:(0,t.jsx)(r.code,{children:"TCPStart"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"TCPStart(socket, timeout)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nEstablishes a TCP connection. The robot acts as a server waiting for a client connection, or as a client attempting to connect to a server."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameters-1",children:"Required Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"timeout"}),": Waiting timeout in seconds. ",(0,t.jsx)(r.code,{children:"0"})," means wait indefinitely until the connection is established."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values-1",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Connection results:","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"0"}),": Connection successful"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"1"}),": Invalid parameters"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"2"}),": Socket object does not exist"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"3"}),": Invalid timeout setting"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"4"}),": Connection failed"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example-1",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"-- Start establishing TCP connection, wait until connected.\r\nerr = TCPStart(socket, 0)  -- socket is the object from TCPCreate\n"})}),"\n",(0,t.jsx)(r.h3,{id:"tcpread",children:(0,t.jsx)(r.code,{children:"TCPRead"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"TCPRead(socket, timeout, type)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nReceives data sent by the TCP peer."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameters-2",children:"Required Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"optional-parameters",children:"Optional Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"timeout"}),": Waiting timeout in seconds. If not set or less than or equal to 0, it will wait until data is read. If greater than 0, it will proceed after the timeout."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"type"}),": Return value type. Default is ",(0,t.jsx)(r.code,{children:'"table"'}),"; if set to ",(0,t.jsx)(r.code,{children:'"string"'}),", data is returned as a string."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values-2",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"err"}),": ",(0,t.jsx)(r.code,{children:"0"})," indicates success, ",(0,t.jsx)(r.code,{children:"1"})," indicates failure."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"RecBuf"}),": The received data buffer."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example-2",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'-- Receive TCP data as both string and table.\r\nerr, RecBuf = TCPRead(socket, 0, "string")  -- RecBuf as string\r\nerr, RecBuf = TCPRead(socket, 0)              -- RecBuf as table\n'})}),"\n",(0,t.jsx)(r.h3,{id:"tcpwrite",children:(0,t.jsx)(r.code,{children:"TCPWrite"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"TCPWrite(socket, buf, timeout)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nSends data to the TCP peer."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameters-3",children:"Required Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"buf"}),": The data to send."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"optional-parameter",children:"Optional Parameter:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"timeout"}),": Waiting timeout in seconds. If not set or ",(0,t.jsx)(r.code,{children:"0"}),", waits until the data is fully sent."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values-3",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"err"}),": ",(0,t.jsx)(r.code,{children:"0"})," indicates success, ",(0,t.jsx)(r.code,{children:"1"})," indicates failure."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'-- Send TCP data with content "test".\r\nTCPWrite(socket, "test")  -- socket is the object from TCPCreate\n'})}),"\n",(0,t.jsx)(r.h3,{id:"tcpdestroy",children:(0,t.jsx)(r.code,{children:"TCPDestroy"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"TCPDestroy(socket)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nDisconnects the TCP connection and destroys the socket object."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameter",children:"Required Parameter:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values-4",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"result"}),":","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"0"}),": Success"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"1"}),": Failure"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example-4",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"-- Disconnect from the TCP peer.\r\nTCPDestroy(socket)  -- socket is the object from TCPCreate\n"})}),"\n",(0,t.jsx)(r.h2,{id:"udp-functions",children:"UDP Functions"}),"\n",(0,t.jsx)(r.h3,{id:"udpcreate",children:(0,t.jsx)(r.code,{children:"UDPCreate"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"UDPCreate(isServer, IP, port)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nCreates a UDP network object. Only one instance can be created."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameters-4",children:"Required Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"isServer"}),": Boolean indicating if a server is being created (",(0,t.jsx)(r.code,{children:"true"})," for server, ",(0,t.jsx)(r.code,{children:"false"})," for client)."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"IP"}),": The IP address for both server and client, must be in the same subnet and not conflict with the robot\u2019s IP."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"port"}),":","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"For the server, this is the port used by both local and peer."}),"\n",(0,t.jsx)(r.li,{children:"For the client, this is the peer's port, and the local will use a random port."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values-5",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"err"}),": ",(0,t.jsx)(r.code,{children:"0"})," indicates success, ",(0,t.jsx)(r.code,{children:"1"})," indicates failure."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example-5",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'-- Creating a UDP server.\r\nlocal ip = "192.168.5.25"  -- External device\'s IP\r\nlocal port = 6001          -- Port used for both ends\r\nlocal err, socket = UDPCreate(true, ip, port)\r\n\r\n-- Creating a UDP client.\r\nlocal ip = "192.168.5.25"  -- External device\'s IP\r\nlocal port = 6001          -- Peer port\r\nlocal err, socket = UDPCreate(false, ip, port)\n'})}),"\n",(0,t.jsx)(r.h3,{id:"udpread",children:(0,t.jsx)(r.code,{children:"UDPRead"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"UDPRead(socket, timeout, type)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nReceives data sent by the UDP peer."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameter-1",children:"Required Parameter:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"optional-parameters-1",children:"Optional Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"timeout"}),": Waiting timeout in seconds. If not set or less than or equal to 0, it waits until data is read; if > 0, it proceeds after the timeout."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"type"}),": Return value type. Default is ",(0,t.jsx)(r.code,{children:'"table"'}),"; if set to ",(0,t.jsx)(r.code,{children:'"string"'}),", data is returned as a string."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values-6",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"err"}),": ",(0,t.jsx)(r.code,{children:"0"})," indicates success, ",(0,t.jsx)(r.code,{children:"1"})," indicates failure."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"RecBuf"}),": The received data buffer."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example-6",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'-- Receive UDP data as both string and table.\r\nerr, RecBuf = UDPRead(socket, 0, "string")  -- RecBuf as string\r\nerr, RecBuf = UDPRead(socket, 0)              -- RecBuf as table\n'})}),"\n",(0,t.jsx)(r.h3,{id:"udpwrite",children:(0,t.jsx)(r.code,{children:"UDPWrite"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Prototype:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"UDPWrite(socket, buf, timeout)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description:"}),"\r\nSends data to the UDP peer."]}),"\n",(0,t.jsx)(r.h3,{id:"required-parameters-5",children:"Required Parameters:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"socket"}),": The created socket object."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"buf"}),": The data to send."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"optional-parameter-1",children:"Optional Parameter:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"timeout"}),": Waiting timeout in seconds. If not set or ",(0,t.jsx)(r.code,{children:"0"}),", waits until the data is fully sent."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"return-values-7",children:"Return Values:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"err"}),": ",(0,t.jsx)(r.code,{children:"0"})," indicates success, ",(0,t.jsx)(r.code,{children:"1"})," indicates failure."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"example-7",children:"Example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'-- Send UDP data with content "test".\r\nUDPWrite(socket, "test")  -- socket is the object from UDPCreate\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},78573:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>d});var s=n(22155);const t={},i=s.createContext(t);function l(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);