"use strict";(self.webpackChunk_dobot_plus_doc=self.webpackChunk_dobot_plus_doc||[]).push([[1766],{10509:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"lua/operator","title":"Operators","description":"Arithmetic Operators","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/lua/02-operator.md","sourceDirName":"lua","slug":"/lua/operator","permalink":"/dobotplus/en/lua/operator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"lua","previous":{"title":"Basic","permalink":"/dobotplus/en/lua/grammer"},"next":{"title":"Logic","permalink":"/dobotplus/en/lua/flow"}}');var s=t(65723),i=t(78573);const l={},d="Operators",o={},a=[{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Example:",id:"example",level:3},{value:"Relational Operators",id:"relational-operators",level:2},{value:"Example:",id:"example-1",level:3},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Example:",id:"example-2",level:3}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"operators",children:"Operators"})}),"\n",(0,s.jsx)(r.h2,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,s.jsx)(r.p,{children:"Arithmetic operators are used to perform mathematical calculations."}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Operator"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"+"})}),(0,s.jsx)(r.td,{children:"Addition"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"-"})}),(0,s.jsx)(r.td,{children:"Subtraction"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"*"})}),(0,s.jsx)(r.td,{children:"Multiplication"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"/"})}),(0,s.jsx)(r.td,{children:"Floating-point division"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"//"})}),(0,s.jsx)(r.td,{children:"Floor division"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"%"})}),(0,s.jsx)(r.td,{children:"Modulus (remainder)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"^"})}),(0,s.jsx)(r.td,{children:"Exponentiation"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"&"})}),(0,s.jsx)(r.td,{children:"Bitwise AND"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"`"}),(0,s.jsx)(r.td,{children:"`"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"~"})}),(0,s.jsx)(r.td,{children:"Bitwise XOR"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"<<"})}),(0,s.jsx)(r.td,{children:"Bitwise left shift"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:">>"})}),(0,s.jsx)(r.td,{children:"Bitwise right shift"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"a = 20\r\nb = 5\r\n\r\nprint(a + b)            -- Prints the result of a + b: 25\r\nprint(a - b)            -- Prints the result of a - b: 15\r\nprint(a * b)            -- Prints the result of a * b: 100\r\nprint(a / b)            -- Prints the result of a / b: 4\r\nprint(a // b)           -- Prints the result of a // b (floor division): 4\r\nprint(a % b)            -- Prints the result of a % b (modulus): 0\r\nprint(a ^ b)            -- Prints the result of a raised to the power of b: 3200000\r\nprint(a & b)            -- Prints the result of bitwise AND: 4\r\nprint(a | b)            -- Prints the result of bitwise OR: 21\r\nprint(a ~ b)            -- Prints the result of bitwise XOR: 17\r\nprint(a << b)           -- Prints the result of a left shifted by b: 640\r\nprint(a >> b)           -- Prints the result of a right shifted by b: 0\n"})}),"\n",(0,s.jsx)(r.h2,{id:"relational-operators",children:"Relational Operators"}),"\n",(0,s.jsx)(r.p,{children:"Relational operators are used to compare two values."}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Operator"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"=="})}),(0,s.jsx)(r.td,{children:"Equal to"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"~="})}),(0,s.jsx)(r.td,{children:"Not equal to"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"<="})}),(0,s.jsx)(r.td,{children:"Less than or equal to"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:">="})}),(0,s.jsx)(r.td,{children:"Greater than or equal to"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"<"})}),(0,s.jsx)(r.td,{children:"Less than"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:">"})}),(0,s.jsx)(r.td,{children:"Greater than"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"example-1",children:"Example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"a = 20\r\nb = 5\r\n\r\nprint(a == b)            -- Prints the comparison result: false\r\nprint(a ~= b)            -- Prints the comparison result: true\r\nprint(a <= b)            -- Prints the comparison result: false\r\nprint(a >= b)            -- Prints the comparison result: true\r\nprint(a < b)             -- Prints the comparison result: false\r\nprint(a > b)             -- Prints the comparison result: true\n"})}),"\n",(0,s.jsx)(r.h2,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,s.jsx)(r.p,{children:"Logical operators are used to perform logical operations on boolean values."}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Operator"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"and"})}),(0,s.jsx)(r.td,{children:"Logical AND; returns true if both sides are true, otherwise false."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"or"})}),(0,s.jsx)(r.td,{children:"Logical OR; returns true if at least one side is true."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"not"})}),(0,s.jsx)(r.td,{children:"Logical NOT; reverses the boolean value."})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"example-2",children:"Example:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"a = true\r\nb = false\r\n\r\nprint(a and b)           -- true AND false results in false\r\nprint(a or b)            -- true OR false results in true\r\nprint(20 > 5 and not true) -- true AND NOT true, which results in false\n"})}),"\n",(0,s.jsx)(r.p,{children:"These operators enable various forms of computation and logical reasoning in Lua scripts, providing the foundation for more complex programming logic."})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},78573:(e,r,t)=>{t.d(r,{R:()=>l,x:()=>d});var n=t(22155);const s={},i=n.createContext(s);function l(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);