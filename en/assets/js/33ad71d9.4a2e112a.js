"use strict";(self.webpackChunk_dobot_plus_website=self.webpackChunk_dobot_plus_website||[]).push([[9703],{82532:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var s=i(65723),t=i(43327);const o={},l="Quick Start",r={id:"tutorials/quickstart",title:"Quick Start",description:"This chapter will introduce you to the development process of the Dobot+ ecosystem accessories, including project resource structure and related concepts.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/tutorials/02-quickstart.md",sourceDirName:"tutorials",slug:"/tutorials/quickstart",permalink:"/dobotplus/en/tutorials/quickstart",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorials",previous:{title:"Environment",permalink:"/dobotplus/en/tutorials/environment"},next:{title:"IO Control",permalink:"/dobotplus/en/tutorials/Examples/io"}},c={},a=[{value:"Installation Steps",id:"installation-steps",level:2},{value:"Creating a Plugin",id:"creating-a-plugin",level:2},{value:"Successful Creation Example",id:"successful-creation-example",level:3},{value:"File Structure",id:"file-structure",level:2},{value:"Development and Debugging",id:"development-and-debugging",level:2},{value:"Step 1: Main Control Interface",id:"step-1-main-control-interface",level:3},{value:"Step 2: Plugin and Controller Communication",id:"step-2-plugin-and-controller-communication",level:3},{value:"Configure Graphical Programming Blocks",id:"configure-graphical-programming-blocks",level:2},{value:"Step 1: Configure Blocks",id:"step-1-configure-blocks",level:3},{value:"Step 2: Block Scripts",id:"step-2-block-scripts",level:3},{value:"Configure Script Programming",id:"configure-script-programming",level:2},{value:"Step 1: Configure Commands",id:"step-1-configure-commands",level:3},{value:"Multilingual Support",id:"multilingual-support",level:2},{value:"Build and Use",id:"build-and-use",level:2},{value:"Build the Plugin",id:"build-the-plugin",level:3},{value:"Using the Plugin",id:"using-the-plugin",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This chapter will introduce you to the development process of the Dobot+ ecosystem accessories, including project resource structure and related concepts."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation-steps",children:"Installation Steps"}),"\n",(0,s.jsx)(n.p,{children:"Please follow these steps to install the developer tools."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Install the Developer Tools"}),(0,s.jsx)(n.br,{}),"\n","Execute the following command to install the Dobot+ toolkit:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install -g dobot-plus-toolkit \n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Verify Installation"}),(0,s.jsx)(n.br,{}),"\n","After successful installation, the system will register a command-line tool named ",(0,s.jsx)(n.code,{children:"dpt"}),". You can check the available commands and options using the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ dpt\nUsage: dpt [options] [command]\n\nDobot plugin toolkit\n\nOptions:\n  -v, --version    output the version number\n  -h, --help       display help for command\n\nCommands:\n  create           create a new plugin\n  dev [options]\n  lua              run lua scripts\n  gui [options]    configure the project with web GUI\n  build [options]  build plugin for production\n  help [command]   display help for command\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-plugin",children:"Creating a Plugin"}),"\n",(0,s.jsx)(n.p,{children:"To create a new plugin folder, execute the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dpt create\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command will prompt the developer to provide the following information:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plugin Name"}),": The plugin name must not be the same as any subfolder in the current directory."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"})," (optional): Default is empty."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Number"}),": The default value is ",(0,s.jsx)(n.code,{children:"1-0-0-test"}),". The version number should follow the format ",(0,s.jsx)(n.code,{children:"[major]-[minor]-[patch]-[status]"}),", connected by ",(0,s.jsx)(n.code,{children:"-"}),". The status should be represented in lowercase letters; it is recommended to use fields like ",(0,s.jsx)(n.code,{children:"test"}),", ",(0,s.jsx)(n.code,{children:"stable"}),", or ",(0,s.jsx)(n.code,{children:"rc"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real Device IP Address"}),": The default is ",(0,s.jsx)(n.code,{children:"192.168.5.1"}),", which can be changed later during debugging."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"After completing the required information as prompted, the tool will create a folder named as specified by the developer, containing the necessary source code templates for plugin development and automatically installing required dependencies."}),"\n",(0,s.jsx)(n.h3,{id:"successful-creation-example",children:"Successful Creation Example"}),"\n",(0,s.jsx)(n.p,{children:"When the plugin is successfully created, you will see information similar to the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" $ dpt create\n? Please input plugin name\n my-plugin\n? Please input plugin description This is a description\n? Please input plugin version 1-0-0\n\nPackages: +345\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nProgress: resolved 346, reused 343, downloaded 2, added 345, done\n\ndependencies:\n+ antd 5.20.1\n+ axios 1.7.3\n+ i18next 23.12.3\n+ pubsub-js 1.9.4\n+ react 18.3.1\n+ react-dom 18.3.1\n+ react-i18next 15.0.1\n+ react-redux 9.1.2\n+ redux 5.0.1\n\ndevDependencies:\n+ @types/node 20.14.15 (22.2.0 is available)\n+ @types/pubsub-js 1.8.6\n+ @types/react 18.3.3\n+ @types/react-dom 18.3.0\n+ @types/react-redux 7.1.33\n+ @typescript-eslint/eslint-plugin 7.18.0 (8.1.0 is available)\n+ @typescript-eslint/parser 7.18.0 (8.1.0 is available)\n+ add 2.0.6\n+ css-loader 7.1.2\n+ eslint 8.57.0 (9.9.0 is available)\n+ eslint-plugin-react-hooks 4.6.2\n+ eslint-plugin-react-refresh 0.4.9\n+ postcss-loader 8.1.1\n+ sass 1.77.8\n+ sass-loader 16.0.0\n+ style-loader 4.0.0\n+ ts-loader 9.5.1\n+ typescript 5.5.4\n+ url-loader 4.1.1\n+ webpack 5.93.0\n\nDone in 24.3s\n"})}),"\n",(0,s.jsx)(n.p,{children:"If there are any issues during the installation process, the developer can enter the newly created plugin folder in the current directory and manually install the required dependencies."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["\u26a0\ufe0f During the installation process, the ",(0,s.jsx)(n.code,{children:"pnpm"})," installation steps will be executed automatically; please allow this operation. Warnings that appear regarding certain dependencies are normal; the actual success of the initialization will be based on the final log."]})}),"\n",(0,s.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,s.jsxs)(n.p,{children:["The Dobot+ ecosystem accessories are divided into three main modules: plugin installation interface, graphical programming blocks, and script programming instructions. All are configured using ",(0,s.jsx)(n.code,{children:"config.json"}),", and the system supports internationalization and quick navigation features."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"my-plugin\n\u251c\u2500\u2500 .dobot # Built-in methods, components, lua scripts, etc.\n\u251c\u2500\u2500 .vscode # VSCode configuration files\n\u251c\u2500\u2500 Resources # Resource folder\n\u2502   \u251c\u2500\u2500 document \n\u2502   \u2502   \u2514\u2500\u2500 config.json\n\u2502   \u251c\u2500\u2500 i18n # Internationalization resources\n\u2502   \u2502   \u251c\u2500\u2500 client # Translation resources for block programming, script programming, and plugin display on the client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 de.json # German\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 en.json # English\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 es.json # Spanish\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hk.json # Traditional Chinese\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ja.json # Japanese\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ko.json # Korean\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ru.json # Russian\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 zh.json # Chinese\n\u2502   \u2502   \u2514\u2500\u2500 plugin # Internationalization translation resources for the plugin UI\n\u2502   \u2502       \u251c\u2500\u2500 de.json\n\u2502   \u2502       \u251c\u2500\u2500 en.json\n\u2502   \u2502       \u251c\u2500\u2500 es.json\n\u2502   \u2502       \u251c\u2500\u2500 hk.json\n\u2502   \u2502       \u251c\u2500\u2500 ja.json\n\u2502   \u2502       \u251c\u2500\u2500 ko.json\n\u2502   \u2502       \u251c\u2500\u2500 ru.json\n\u2502   \u2502       \u2514\u2500\u2500 zh.json\n\u2502   \u2514\u2500\u2500 images\n\u2502       \u2514\u2500\u2500 pallet.svg\n\u251c\u2500\u2500 configs # Configuration files\n\u2502   \u251c\u2500\u2500 Blocks.json  # Configuration file for block programming\n\u2502   \u251c\u2500\u2500 Main.json    # Plugin information configuration file\n\u2502   \u251c\u2500\u2500 Scripts.json # Configuration file for function programming\n\u2502   \u2514\u2500\u2500 Toolbar.json # Toolbar configuration file\n\u251c\u2500\u2500 dpt.json # Controller configuration file for debugging\n\u251c\u2500\u2500 lua # Lua script folder for the controller\n\u2502   \u251c\u2500\u2500 daemon.lua  # Main process\n\u2502   \u251c\u2500\u2500 httpAPI.lua # Process for responding to HTTP requests\n\u2502   \u251c\u2500\u2500 userAPI.lua # External interfaces for script programming and block programming\n\u2502   \u2514\u2500\u2500 utils # Lua utility functions\n\u2502       \u251c\u2500\u2500 await485.lua # Tools for using the 485 channel\n\u2502       \u251c\u2500\u2500 mqtt.lua # MQTT connection tools\n\u2502       \u251c\u2500\u2500 num_convert.lua # Numerical calculation tools\n\u2502       \u251c\u2500\u2500 util.lua # General utility tools\n\u2502       \u2514\u2500\u2500 variables.lua # Variable module\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 pnpm-lock.yaml\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 ui # Plugin UI interface\n    \u251c\u2500\u2500 Blocks.tsx # Block dialog page\n    \u251c\u2500\u2500 Main.tsx # Plugin main page\n    \u2514\u2500\u2500 Toolbar.tsx # Plugin toolbar\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Resources"})," folder mainly stores static resources, including but not limited to images, videos, and international translation resources. Developers can add new resources to this folder as needed."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"lua"})," folder stores Lua scripts. After the plugin installation is complete, the controller uses Lua scripts to control the robotic arm and end-effector.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"daemon.lua"})," - The main process; after the plugin is installed, the main Lua process will be automatically invoked to execute the programs in this script."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"httpAPI.lua"})," - The HTTP module; the GUI sends data to the controller via POST requests, and the controller calls the corresponding methods in the HTTP module to control the robotic arm and end-effector."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"userAPI.lua"})," - Corresponds to the functionalities of script programming and block programming; methods in this module are called based on relevant configurations during script and block programming."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"utils"})," -","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"await485.lua"})," - The robotic arm communicates with the end-effector through the 485 channel. When communicating, the 485 channel may be occupied, which can lead to data transmission or reading failures. This module encapsulates lock operations for the 485 channel to read and write data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mqtt.lua"})," - A tool for establishing MQTT connections for the controller to push messages to the host computer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"num_convert.lua"})," - A tool for numerical conversion."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tcp.lua"})," - A tool for establishing TCP connections between the robotic arm and end-effector."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"util.lua"})," - General utility functions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"variables.lua"})," - Definitions of constants and variables."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"development-and-debugging",children:"Development and Debugging"}),"\n",(0,s.jsxs)(n.p,{children:["When developing a plugin, it is necessary to plan the functionalities that the plugin installation interface should provide, and then organize the interface functionality. The development of the Dobot+ ecosystem accessory pages uses the ",(0,s.jsx)(n.a,{href:"https://react.docschina.org/learn",children:"React framework"})," for front-end development, while the interface development uses ",(0,s.jsx)(n.a,{href:"https://www.lua.org/pil/contents.html",children:"Lua"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["During the development and debugging phase, the ",(0,s.jsx)(n.code,{children:"dpt"})," command must be run in the plugin project folder. Use the ",(0,s.jsx)(n.code,{children:"cd"})," command to navigate to the corresponding plugin project folder:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# For example, cd c:/users/username/testPlugin\ncd <plugin project path>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-1-main-control-interface",children:"Step 1: Main Control Interface"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Develop the plugin's main control interface in the ",(0,s.jsx)(n.code,{children:"ui/Main.tsx"})," file."]}),"\n",(0,s.jsxs)(n.li,{children:["Configure the basic information that needs to be displayed on the plugin installation interface in the ",(0,s.jsx)(n.code,{children:"configs/Main.json"})," file, including the plugin name, version number, and description."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"During the page development, you can use the following command for style adjustments and event binding:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dpt dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output will be as follows (some content omitted):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dpt dev\nStarting server...\n<i> [webpack-dev-server] Project is running at:\n<i> [webpack-dev-server] Loopback: http://localhost:8080/\n<i> [webpack-dev-server] On Your Network (IPv4): http://192.168.111.51:8080/\n<i> [webpack-dev-server] Content not from webpack is served from \n...\n...\nwebpack 5.93.0 compiled successfully in 7147 ms\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Wait for the page to compile. Click the ",(0,s.jsx)(n.code,{children:"Preview|Debug"})," button for the page you want to debug to enter the corresponding preview page."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Preview Page",src:i(41968).A+"",width:"1920",height:"929"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-plugin-and-controller-communication",children:"Step 2: Plugin and Controller Communication"}),"\n",(0,s.jsx)(n.p,{children:"The navigation bar and plugin control interface communicate with the controller via the HTTP protocol. Upon receiving the software's HTTP request, the controller looks for the corresponding plugin and specific function based on the request URL and executes that function."}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When a button is clicked in the UI, it sends a request: ",(0,s.jsx)(n.code,{children:"http://192.168.5.1:22001/pluginName/testMethod"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Upon receiving the HTTP request, the host computer looks up the installed plugins in the controller using ",(0,s.jsx)(n.code,{children:"pluginName"})," and finds the function named ",(0,s.jsx)(n.code,{children:"testMethod"})," in the ",(0,s.jsx)(n.code,{children:"lua/httpAPI.lua"})," file of that plugin."]}),"\n",(0,s.jsxs)(n.li,{children:["Once the ",(0,s.jsx)(n.code,{children:"testMethod"})," function is correctly located, the controller executes the Lua code within that function."]}),"\n",(0,s.jsx)(n.li,{children:"If the function has a return value, it will send the return value back to the UI as an HTTP response."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configure-graphical-programming-blocks",children:"Configure Graphical Programming Blocks"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-configure-blocks",children:"Step 1: Configure Blocks"}),"\n",(0,s.jsxs)(n.p,{children:["Configure the relevant information for block programming in the ",(0,s.jsx)(n.code,{children:"configs/Blocks.json"})," file of the plugin project. For specific configuration items, please refer to the ",(0,s.jsx)(n.a,{href:"/api/blocky",children:"Block Configuration Section"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"step-2-block-scripts",children:"Step 2: Block Scripts"}),"\n",(0,s.jsx)(n.p,{children:"In block programming, each block module needs to execute certain Lua code. Users can write their own code or use the methods provided in the plugin."}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"lua/userAPI.lua"})," file, there is an ",(0,s.jsx)(n.code,{children:"OnRegist"})," method. This function will execute after the plugin is installed and will expose certain functions for block and script programming modules."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'function userApiModule.OnRegist()\n    EcoLog(" --- OnRegist ....  --- ")\n    -- 0. Export interfaces\n    local isErr = ExportFunction("test", userApiModule.demoMethod1) or\n        ExportFunction("demo", userApiModule.demoMethod2) or\n        ExportFunction("example", userApiModule.demoMethod3)\n    -- 1. Error handling       \n    if isErr then\n        EcoLog(" --- ERR to  register .... --- ", isErr)\n        dobotTool.SetError(0)\n    end\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the code above:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The function ",(0,s.jsx)(n.code,{children:"demoMethod1"})," from the ",(0,s.jsx)(n.code,{children:"userApiModule"})," module is exposed as a function named ",(0,s.jsx)(n.code,{children:"test"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The function ",(0,s.jsx)(n.code,{children:"demoMethod2"})," from the ",(0,s.jsx)(n.code,{children:"userApiModule"})," module is exposed as a function named ",(0,s.jsx)(n.code,{children:"demo"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The function ",(0,s.jsx)(n.code,{children:"demoMethod3"})," from the ",(0,s.jsx)(n.code,{children:"userApiModule"})," module is exposed as a function named ",(0,s.jsx)(n.code,{children:"example"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In the block programming configuration, under the ",(0,s.jsx)(n.code,{children:"block_code"})," field, you can use the functions named ",(0,s.jsx)(n.code,{children:"test"}),", ",(0,s.jsx)(n.code,{children:"demo"}),", and ",(0,s.jsx)(n.code,{children:"example"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"configure-script-programming",children:"Configure Script Programming"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-configure-commands",children:"Step 1: Configure Commands"}),"\n",(0,s.jsxs)(n.p,{children:["Configure command parameters in the ",(0,s.jsx)(n.code,{children:"configs/Scripts.json"})," file of the plugin project."]}),"\n",(0,s.jsxs)(n.p,{children:["Refer to the ",(0,s.jsx)(n.a,{href:"/api/script",children:"Script Command Configuration Parameters"})," to learn how to generate command configurations."]}),"\n",(0,s.jsx)(n.h2,{id:"multilingual-support",children:"Multilingual Support"}),"\n",(0,s.jsx)(n.p,{children:"Internationalization content is divided into two parts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Resources/i18n/client"}),": Translations for scenarios where the plugin is used on the client side, including plugin descriptions, block translations, script programming translations, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Resources/i18n/plugin"}),": Internationalization translations for the control page after the plugin is installed."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To add multilingual translations, locate the ",(0,s.jsx)(n.code,{children:"Resources/i18n/client"})," directory and configure the language packs accordingly."]}),"\n",(0,s.jsx)(n.p,{children:"For example, for Chinese and English translations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"Resources/i18n/client/zh.json"}),", add under the ",(0,s.jsx)(n.code,{children:"config"})," field:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "config": {\n    "tr_description": "\u6269\u5c55IO\u63d2\u4ef6"\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"Resources/i18n/client/en.json"}),", add under the ",(0,s.jsx)(n.code,{children:"config"})," field:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "config": {\n    "tr_description": "Extended IO plugin"\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"configs/Main.json"}),", use the following configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "name": "EXTIO",\n  "version": 1,\n  "description": "%{tr_description}"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Using the method above, the corresponding translation language will be displayed based on the language setting of the DobotStudio Pro software interface."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Note:"})}),"\n",(0,s.jsx)(n.p,{children:"If multilingual support is used, translations for at least Simplified Chinese and English must be configured, with English being the default display language."}),"\n",(0,s.jsx)(n.h2,{id:"build-and-use",children:"Build and Use"}),"\n",(0,s.jsx)(n.h3,{id:"build-the-plugin",children:"Build the Plugin"}),"\n",(0,s.jsx)(n.p,{children:"After completing the development, debugging, and optimization of the plugin, you can execute the final build process by running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dpt build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Once the program executes successfully, a ",(0,s.jsx)(n.code,{children:"dist"})," folder and an ",(0,s.jsx)(n.code,{children:"output"})," folder will appear in the current directory:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"dist"})," folder contains the plugin code after this build, allowing developers to check the build results."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"output"})," folder contains the compressed ",(0,s.jsx)(n.code,{children:"zip"})," file, with the filename format ",(0,s.jsx)(n.code,{children:"<plugin_name>-<version_number>.zip"}),", which is the actual plugin used for import on the client side."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"using-the-plugin",children:"Using the Plugin"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Navigation Bar Entry"}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{src:i(81014).A+"",width:"1456",height:"816"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Importing the Plugin"}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{src:i(96598).A+"",width:"1456",height:"816"})]}),"\n",(0,s.jsx)(n.p,{children:"Plugins with the same name need to be uninstalled before importing an already installed plugin."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Select Plugin Zip Package"}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{src:i(50399).A+"",width:"592",height:"251"})]}),"\n",(0,s.jsxs)(n.p,{children:["The plugin zip package is a compressed file in zip format, and the naming format is:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"<plugin_name>_v<major_version>-<minor_update_version>-<fix_version>-<version_status: test, stable, rc>.zip"})]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},81014:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/use-7c07cbb15079115dd56716649f22fb01.png"},96598:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/use2-36b9b7a0e1d40b8e294356f11bc3b8e1.png"},50399:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/use3-b1a39824203c272136adabaf38031593.png"},41968:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/website-29fc11547ab4cd949cdddc283393a6e7.png"},43327:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(22155);const t={},o=s.createContext(t);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);