"use strict";(self.webpackChunk_dobot_plus_website=self.webpackChunk_dobot_plus_website||[]).push([[4248],{32260:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var i=t(65723),o=t(43327);const l={},s="IO Control",r={id:"tutorials/examples/io",title:"IO Control",description:"This tutorial will implement a plugin to control the suction and release of a vacuum gripper.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/tutorials/examples/01-io.md",sourceDirName:"tutorials/examples",slug:"/tutorials/examples/io",permalink:"/dobotplus/en/tutorials/examples/io",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorials",previous:{title:"Quick Start",permalink:"/dobotplus/en/tutorials/quickstart"},next:{title:"Hotkey Control",permalink:"/dobotplus/en/tutorials/examples/hotkey"}},a={},c=[{value:"Create a Plugin",id:"create-a-plugin",level:2},{value:"Mechanical Arm &amp; End Effector Control",id:"mechanical-arm--end-effector-control",level:3},{value:"Step 1: Edit <code>control.lua</code>",id:"step-1-edit-controllua",level:3},{value:"Step 2: Write <code>httpAPI.lua</code>",id:"step-2-write-httpapilua",level:3},{value:"Step 3: Lua Pre-debugging",id:"step-3-lua-pre-debugging",level:3},{value:"Control Interface",id:"control-interface",level:3},{value:"Debugging and Validation",id:"debugging-and-validation",level:3},{value:"Building the Plugin",id:"building-the-plugin",level:3},{value:"\u26a0\ufe0f Important Notes",id:"\ufe0f-important-notes",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"io-control",children:"IO Control"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"This tutorial will implement a plugin to control the suction and release of a vacuum gripper."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The workflow of this plugin is as follows:"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph LR\nA[Suction Button]--\x3e|Click|B(Send Suction HTTP Request)--\x3e|Controller Calls|C[httpApi Module Method]--\x3e|Parameter Handling, Reference|D[control.lua Module Method]\nA1[Release Button]--\x3e|Click|B1(Send Release HTTP Request)--\x3e|Controller Calls|C[httpApi Module Method]\nA2[Script Programming]--\x3e|Add Script|B2(Save Script)--\x3e|Controller Executes Script|C1[Registered Methods in userApi Module's OnRegist]--\x3e|Parameter Handling, Reference|D\nA3[Block Programming]--\x3e|Add Block|B3(Save Block)--\x3e|Controller Converts Block to Code|C1[Registered Methods in userApi Module's OnRegist]\nD --\x3e|Modbus Protocol|E[End Effector]"}),"\n",(0,i.jsx)(n.h2,{id:"create-a-plugin",children:"Create a Plugin"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Node.js v20 or above is required\ndpt create\n"})}),"\n",(0,i.jsx)(n.p,{children:"During the plugin initialization, you will need to provide the following information:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plugin Name"})," (required): Must not conflict with any existing folder in the current directory."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plugin Description"})," (optional): Can be modified later in the configuration file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plugin Version"})," (optional): Default is ",(0,i.jsx)(n.code,{children:"1-0-0-test"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"IP Address of the Robot Controller"})," (optional): Default is ",(0,i.jsx)(n.code,{children:"192.168.5.1"}),", can be changed later in the configuration file."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example of the initialization process:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ dpt create\n? Please input plugin name: io\n? Please input plugin description: An io control demo\n? Please input plugin version: 1-0-0\n? Please input device IP: 192.168.5.1\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once the basic information is configured and filled in, the program will automatically execute the installation process:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Packages: +587\nDownloading antd@5.20.3: 9.80 MB/9.80 MB, done\nProgress: resolved 588, reused 582, downloaded 5, added 587, done\n\ndependencies:\n+ @dobot-plus/components 0.0.0\n+ antd 5.20.3\n+ axios 1.7.5\n+ i18next 23.14.0\n+ pubsub-js 1.9.4\n+ react 18.3.1\n+ react-dom 18.3.1\n+ react-i18next 15.0.1\n+ react-redux 9.1.2\n+ redux 5.0.1\n\ndevDependencies:\n+ @types/node 20.16.1 (22.5.0 is available)\n+ @types/pubsub-js 1.8.6\n+ @types/react 18.3.4\n+ @types/react-dom 18.3.0\n+ @types/react-redux 7.1.33\n+ @typescript-eslint/eslint-plugin 7.18.0 (8.3.0 is available)\n+ @typescript-eslint/parser 7.18.0 (8.3.0 is available)\n+ add 2.0.6\n+ css-loader 7.1.2\n+ eslint 8.57.0 (9.9.1 is available)\n+ eslint-plugin-react-hooks 4.6.2\n+ eslint-plugin-react-refresh 0.4.11\n+ postcss-loader 8.1.1\n+ sass 1.77.8\n+ sass-loader 16.0.1\n+ style-loader 4.0.0\n+ ts-loader 9.5.1\n+ typescript 5.5.4\n+ url-loader 4.1.1\n+ webpack 5.94.0\n\nDone in 39.7s\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f Note:"})," After the plugin folder is initialized, VS Code will start installing some extensions according to the configuration. Please allow the installation to proceed smoothly, as failure to do so could affect the Lua script debugging process."]}),"\n",(0,i.jsx)(n.p,{children:"Once the command line outputs similar content, the plugin project folder has been successfully created."}),"\n",(0,i.jsx)(n.p,{children:"The directory structure is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"io\n\u251c\u2500\u2500 Resources\n\u2502   \u251c\u2500\u2500 document\n\u2502   \u2502   \u2514\u2500\u2500 config.json\n\u2502   \u251c\u2500\u2500 i18n\n\u2502   \u2502   \u251c\u2500\u2500 client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 de.json          # German translations for client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 en.json          # English translations for client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 es.json          # Spanish translations for client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hk.json          # Traditional Chinese translations for client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ja.json          # Japanese translations for client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ko.json          # Korean translations for client\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ru.json          # Russian translations for client\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 zh.json          # Simplified Chinese translations for client\n\u2502   \u2502   \u2514\u2500\u2500 plugin\n\u2502   \u2502       \u251c\u2500\u2500 de.json          # German translations for plugin UI\n\u2502   \u2502       \u251c\u2500\u2500 en.json          # English translations for plugin UI\n\u2502   \u2502       \u251c\u2500\u2500 es.json          # Spanish translations for plugin UI\n\u2502   \u2502       \u251c\u2500\u2500 hk.json          # Traditional Chinese translations for plugin UI\n\u2502   \u2502       \u251c\u2500\u2500 ja.json          # Japanese translations for plugin UI\n\u2502   \u2502       \u251c\u2500\u2500 ko.json          # Korean translations for plugin UI\n\u2502   \u2502       \u251c\u2500\u2500 ru.json          # Russian translations for plugin UI\n\u2502   \u2502       \u2514\u2500\u2500 zh.json          # Simplified Chinese translations for plugin UI\n\u2502   \u2514\u2500\u2500 images\n\u2502       \u2514\u2500\u2500 pallet.svg           # Image resources (e.g., SVG graphics)\n\u251c\u2500\u2500 configs\n\u2502   \u251c\u2500\u2500 Blocks.json              # Configuration for block programming\n\u2502   \u251c\u2500\u2500 Main.json                # Main plugin configuration file\n\u2502   \u251c\u2500\u2500 Scripts.json             # Configuration for script programming\n\u2502   \u2514\u2500\u2500 Toolbar.json             # Toolbar configuration\n\u251c\u2500\u2500 dpt.json                     # Debugging configuration\n\u251c\u2500\u2500 lua\n\u2502   \u251c\u2500\u2500 daemon.lua               # Main process Lua script\n\u2502   \u251c\u2500\u2500 control.lua              # Control module Lua script\n\u2502   \u251c\u2500\u2500 httpAPI.lua              # HTTP API handling Lua script\n\u2502   \u251c\u2500\u2500 userAPI.lua              # User API for block and script programming\n\u2502   \u2514\u2500\u2500 utils                    # Utility Lua scripts\n\u2502       \u251c\u2500\u2500 await485.lua         # Utility for 485 communication protocol\n\u2502       \u251c\u2500\u2500 mqtt.lua             # MQTT connection utility\n\u2502       \u251c\u2500\u2500 num_convert.lua      # Number conversion utility\n\u2502       \u251c\u2500\u2500 util.lua             # General utility functions\n\u2502       \u2514\u2500\u2500 variables.lua        # Variable definitions and constants\n\u251c\u2500\u2500 package.json                 # Node.js dependencies\n\u251c\u2500\u2500 pnpm-lock.yaml               # pnpm lock file\n\u251c\u2500\u2500 tsconfig.json                # TypeScript configuration\n\u2514\u2500\u2500 ui\n    \u251c\u2500\u2500 Blocks.tsx               # UI for block programming\n    \u251c\u2500\u2500 Main.tsx                 # Main UI component for the plugin\n    \u2514\u2500\u2500 Toolbar.tsx              # Toolbar UI component\n"})}),"\n",(0,i.jsx)(n.p,{children:"This structure includes resource files, internationalization (i18n), Lua scripts for the controller, TypeScript components for the UI, and configuration files for various parts of the plugin."}),"\n",(0,i.jsx)(n.h3,{id:"mechanical-arm--end-effector-control",children:"Mechanical Arm & End Effector Control"}),"\n",(0,i.jsxs)(n.p,{children:["The control logic for the robotic arm and the end effector is written in the ",(0,i.jsx)(n.code,{children:"control.lua"})," file. For this plugin, we will create two functions:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Grip function"}),": Controls the suction operation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Release function"}),": Stops the suction operation."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We'll write the ",(0,i.jsx)(n.code,{children:"control.lua"})," and ",(0,i.jsx)(n.code,{children:"httpAPI.lua"})," files and then integrate the functionality with the user interface (UI)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"step-1-edit-controllua",children:["Step 1: Edit ",(0,i.jsx)(n.code,{children:"control.lua"})]}),"\n",(0,i.jsx)(n.p,{children:"This file contains the main logic to control the arm\u2019s suction and release actions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local control = {}\n\n-- Define function 'grip' to control suction operation\nfunction control.grip()\n    -- Set the input signal of the first terminal to ON (suction activated)\n    ToolDO(1, 1)\nend\n\n-- Define function 'release' to stop suction operation\nfunction control.release()\n    -- Set the input signal of the first terminal to OFF (suction deactivated)\n    ToolDO(1, 0)\nend\n\nreturn control\n"})}),"\n",(0,i.jsx)(n.p,{children:"When the user hovers over the function in the editor, a tooltip with information such as function description, parameter types, and return values will appear."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(50752).A+"",width:"1920",height:"1080"})}),"\n",(0,i.jsxs)(n.h3,{id:"step-2-write-httpapilua",children:["Step 2: Write ",(0,i.jsx)(n.code,{children:"httpAPI.lua"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"httpAPI.lua"})," file will handle the HTTP requests from the UI and trigger the corresponding functions (grip or release) in the ",(0,i.jsx)(n.code,{children:"control.lua"})," file. This setup allows the UI to interact with the robotic arm's end effector."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local control = require('control')  -- Import the control module\nlocal httpModule = {}\n\n-- Define an HTTP POST handler for the grip function\nhttpModule.grip = function()\n   control.grip()    -- Call the grip function from control.lua\n   return {\n       success = true  -- Return success response\n   }\nend\n\n-- Define an HTTP POST handler for the release function\nhttpModule.release = function()\n   control.release()  -- Call the release function from control.lua\n   return {\n       success = true  -- Return success response\n   }\nend\n\nreturn httpModule  -- Return the httpModule with both handlers\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-lua-pre-debugging",children:"Step 3: Lua Pre-debugging"}),"\n",(0,i.jsx)(n.p,{children:"To ensure the Lua scripts are functioning properly, you can pre-debug them locally:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Run the following command from the root directory of your project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dpt lua\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Choose the Lua script you want to run for local testing."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Developers can print logs and check for issues with module imports, syntax, or logic in the Lua scripts. This helps catch any potential problems before deployment."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"control-interface",children:"Control Interface"}),"\n",(0,i.jsxs)(n.p,{children:["In this step, you'll create the plugin's control interface in ",(0,i.jsx)(n.code,{children:"ui/Main.tsx"}),". This interface will allow the user to control the robotic arm's end effector by sending HTTP requests to trigger the ",(0,i.jsx)(n.code,{children:"grip"})," and ",(0,i.jsx)(n.code,{children:"release"})," functions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import { Button } from \'@dobot-plus/components\'  // Importing Button component\nimport { useTranslation } from \'react-i18next\'   // Importing translation hook\nimport { http, DobotPlusApp } from \'@dobot/index\'  // Importing http module and DobotPlusApp\n\nfunction App() {\n    const { t } = useTranslation()  // Using translation hook for multi-language support\n\n    // Function to handle the "Grip" button click\n    function handleButton1Click() {\n        http.grip()  // Call the grip function over HTTP\n    }\n\n    // Function to handle the "Release" button click\n    function handleButton2Click() {\n        http.release()  // Call the release function over HTTP\n    }\n\n    return (\n        <div className="app">\n            <DobotPlusApp>  {/* Main container for Dobot Plus App */}\n                <h1>{t(\'testKey\')}</h1>  {/* Translatable header */}\n                <Button type="primary" onClick={handleButton1Click}>Grip</Button>  {/* Grip button */}\n                <Button type="primary" onClick={handleButton2Click}>Release</Button>  {/* Release button */}\n            </DobotPlusApp>\n        </div>\n    )\n}\n\nexport default App  // Exporting the component\n'})}),"\n",(0,i.jsx)(n.h3,{id:"debugging-and-validation",children:"Debugging and Validation"}),"\n",(0,i.jsx)(n.p,{children:"To debug and validate the plugin, you can work in two modes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Debug only the UI"}),"\n",(0,i.jsx)(n.li,{children:"Debug with a connected real device"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Run the following command to start debugging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dpt dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"The command will prompt you to confirm if you'd like to connect to a real device for debugging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ dpt dev\n? Debug lua on real device? Yes\n? Please check the device IP: 192.168.5.1 (y/n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"You will need to ensure that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The real device's IP address is correct (default: ",(0,i.jsx)(n.code,{children:"192.168.5.1"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"The SFTP service configuration is correct"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["These configurations can be checked and updated in the ",(0,i.jsx)(n.code,{children:"dpt.json"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "ip": "192.168.5.1",                              // Controller IP\n  "pluginPort": 22100                               // Plugin port number\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"When connected to the real device for debugging:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Once the plugin is successfully installed and connected to the controller, the plugin port will be automatically updated."}),"\n",(0,i.jsx)(n.li,{children:"Any Lua file changes will be automatically synced with the controller, allowing you to control the robot's end effector via the web interface."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"building-the-plugin",children:"Building the Plugin"}),"\n",(0,i.jsx)(n.p,{children:"Once you have completed the plugin development, testing, and optimization, you can build the final plugin package by running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dpt build\n"})}),"\n",(0,i.jsx)(n.p,{children:"After the build is complete, the following folders will be created:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dist"}),": Contains the compiled plugin code for developers to inspect"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"output"}),": Contains the compressed plugin file (ZIP format) for client-side import. The file name will follow the format ",(0,i.jsx)(n.code,{children:"<plugin-name>-<version-number>.zip"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This ZIP file is what you'll use to import the plugin into the Dobot Studio client."}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-important-notes",children:"\u26a0\ufe0f Important Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Automatic HTTP Request Generation:"}),"\nThe plugin automatically generates a frontend HTTP request file based on the methods written in the ",(0,i.jsx)(n.code,{children:"lua/httpAPI.lua"})," module. Developers can import and use this file as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { http } from '@dobot/index'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once imported, you can make HTTP requests by calling functions with the same names as those defined in ",(0,i.jsx)(n.code,{children:"lua/httpAPI.lua"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:".ts"})," or ",(0,i.jsx)(n.code,{children:".tsx"})," files within the ",(0,i.jsx)(n.code,{children:"UI"})," folder:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Send an HTTP request to trigger the 'grip' function in httpAPI.lua\nhttp.grip()\n\n// Send an HTTP request to trigger the 'release' function in httpAPI.lua\nhttp.release()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Customizing HTTP Requests:"}),"\nBy default, the plugin generates the necessary HTTP configuration for the UI, mapping HTTP requests to the functions defined in ",(0,i.jsx)(n.code,{children:"lua/httpAPI.lua"}),". If developers wish to manually configure requests, they can create a ",(0,i.jsx)(n.code,{children:".dobot/http/api.json"})," file. Currently, only the ",(0,i.jsx)(n.code,{children:"POST"})," method is supported."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "requestGrip": {\n        "url": "grip"\n    },\n    "requestRelease": {\n        "url": "release"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"To use these custom configurations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { http } from '@dobot/index'\n\nhttp.requestGrip()   // Calls the grip function defined in httpAPI.lua\nhttp.requestRelease()   // Calls the release function defined in httpAPI.lua\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The URLs specified in the ",(0,i.jsx)(n.code,{children:"api.json"})," file must correspond to the function names in the ",(0,i.jsx)(n.code,{children:"httpAPI.lua"})," module. This ensures that the controller calls the correct methods."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"DobotPlusApp"})," Component:"]}),"\n",(0,i.jsx)(n.code,{children:"DobotPlusApp"})," is a React higher-order component (HOC) that handles WebSocket setup and retrieves the plugin port. It provides the following optional props:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"useMqtt"}),": Whether to use MQTT protocol for receiving messages from the controller. The default is ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onMessage"}),": A function to handle messages received from the controller via MQTT protocol."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"UI Files Compilation:"}),"\nDuring the build process, all ",(0,i.jsx)(n.code,{children:".tsx"})," files in the top level of the ",(0,i.jsx)(n.code,{children:"ui"})," directory will be compiled into corresponding pages:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Main.tsx"}),": Represents the plugin's main page."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Toolbar.tsx"}),": Represents the plugin's toolbar page."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Blocks.tsx"}),": Represents the plugin's blocks window page."]}),"\n",(0,i.jsxs)(n.li,{children:["Other ",(0,i.jsx)(n.code,{children:".tsx"})," files in the top level of ",(0,i.jsx)(n.code,{children:"ui"})," will also be compiled into pages, so developers should carefully name their files to avoid unintended behavior."]}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},50752:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/code-tip-69e099b658b06fda6897425b9e494a96.png"},43327:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(22155);const o={},l=i.createContext(o);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);