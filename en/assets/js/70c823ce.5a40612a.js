"use strict";(self.webpackChunk_dobot_plus_website=self.webpackChunk_dobot_plus_website||[]).push([[5682],{5899:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=t(65723),i=t(43327);const a={},s="Tray",o={id:"lua/tray",title:"Tray",description:"Command List",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/lua/12-tray.md",sourceDirName:"lua",slug:"/lua/tray",permalink:"/dobotplus/en/lua/tray",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"lua",previous:{title:"Program Control",permalink:"/dobotplus/en/lua/programControl"},next:{title:"Distributed Lock",permalink:"/dobotplus/en/lua/lock"}},l={},d=[{value:"Command List",id:"command-list",level:2},{value:"CreateTray",id:"createtray",level:2},{value:"GetTrayPoint",id:"gettraypoint",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tray",children:"Tray"})}),"\n",(0,r.jsx)(n.h2,{id:"command-list",children:"Command List"}),"\n",(0,r.jsx)(n.p,{children:"A tray is a carrying device for placing bulk materials according to a specific arrangement pattern, commonly used in automated loading and unloading processes. Trays typically feature an array of grooves, with each groove capable of holding one material. Using tray commands, you can create a complete array of tray points by teaching a few points, and you can retrieve specific points from an existing tray to quickly achieve automatic loading and unloading by the robot."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Command"}),(0,r.jsx)(n.th,{children:"Function"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CreateTray"}),(0,r.jsx)(n.td,{children:"Create a tray"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GetTrayPoint"}),(0,r.jsx)(n.td,{children:"Get a tray point"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"createtray",children:"CreateTray"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"CreateTray(Trayname, {Count}, {P1,P2})  -- One-dimensional tray\nCreateTray(Trayname, {row,col}, {P1,P2,P3,P4})  -- Two-dimensional tray\nCreateTray(Trayname, {row,col,layer}, {P1,P2,P3,P4,P5,P6,P7,P8})  -- Three-dimensional tray\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a tray, supporting the creation of one-dimensional, two-dimensional, and three-dimensional trays. A maximum of 20 trays can be created. If a tray with the same name is created, it will overwrite the existing tray, not increasing the total number of trays."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Trayname"}),": The name of the tray, a string with a maximum length of 32 bytes, which cannot be purely numeric or consist solely of spaces."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The last two parameters are table variables, and the number of values within the tables varies according to the dimensionality of the tray being created, as described below."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Creating a One-Dimensional Tray"}),": A one-dimensional tray consists of a set of points distributed evenly along a straight line."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{Count}"}),": Count indicates the number of points, with a value range of [2, 50]. Non-integer input will automatically round down."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{P1,P2}"}),": P1 and P2 are the two endpoints of the tray, supporting taught points and pose variables."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Creating a Two-Dimensional Tray"}),": A two-dimensional tray consists of a set of points distributed in an array on a plane."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{row,col}"}),": ",(0,r.jsx)(n.code,{children:"row"})," represents the number of points in the row direction (from P1 to P2), and ",(0,r.jsx)(n.code,{children:"col"})," represents the number of points in the column direction (from P1 to P4). Both ranges are the same as the Count of a one-dimensional tray."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{P1,P2,P3,P4}"}),": P1, P2, P3, and P4 are the four vertices of the two-dimensional tray, supporting taught points and pose variables."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Creating a Three-Dimensional Tray"}),": A three-dimensional tray consists of a set of points distributed in three-dimensional space, visualized as multiple two-dimensional trays stacked vertically."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{row,col,layer}"}),": ",(0,r.jsx)(n.code,{children:"row"})," indicates the number of points in the row direction (from P1 to P2), ",(0,r.jsx)(n.code,{children:"col"})," indicates the number of points in the column direction (from P2 to P4), and ",(0,r.jsx)(n.code,{children:"layer"})," indicates the number of layers (from P1 to P5)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{P1,P2,P3,P4,P5,P6,P7,P8}"}),": P1 to P8 are the eight vertices of the three-dimensional tray, supporting taught points and pose variables."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),"\nIf you are using an end tool, please ensure that the tool coordinate system corresponding to the end tool is selected when teaching the points."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Create a one-dimensional tray named "t1" with 5 points.\nCreateTray("t1", {5}, {P1,P2})\n-- Create a two-dimensional tray named "t2" with 4 rows and 5 columns.\nCreateTray("t2", {4,5}, {P1,P2,P3,P4})\n-- Create a three-dimensional tray named "t3" with 4 rows, 5 columns, and 6 layers.\nCreateTray("t3", {4,5,6}, {P1,P2,P3,P4,P5,P6,P7,P8})\n'})}),"\n",(0,r.jsx)(n.h2,{id:"gettraypoint",children:"GetTrayPoint"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"GetTrayPoint(Trayname, index)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Description:"})}),"\n",(0,r.jsx)(n.p,{children:"Retrieve the point at a specified index from a specified tray. The point index is related to the order in which points were passed when creating the tray."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"One-Dimensional Tray"}),": Point P1 has an index of 1, and P2 has the same index as the total number of points, and so on."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Two-Dimensional Tray"}),": The relationship between the taught points and point indices is illustrated below using a 3x3 tray as an example."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Three-Dimensional Tray"}),": Refer to the two-dimensional tray; the first point of the second layer has an index equal to the last point of the first layer's index plus one, and so on."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Trayname"}),": The name of the created tray, a string with a maximum length of 32 bytes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index"}),": The index of the point to retrieve."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsx)(n.p,{children:"The coordinates of the corresponding point at the specified index. If taught points were used to create the tray, the returned format will also be that of taught points. If pose variables were used, the returned format will be that of pose variables."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Get the point with index 3 from the tray named "t1".\nGetTrayPoint("t1", 3)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},43327:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(22155);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);