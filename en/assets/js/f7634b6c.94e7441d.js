"use strict";(self.webpackChunk_dobot_plus_doc=self.webpackChunk_dobot_plus_doc||[]).push([[5324],{80698:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorials/Examples/grip","title":"Gripper Control","description":"This example will complete the development of a suction cup plugin for gripping and releasing workpieces.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/tutorials/Examples/04-grip.md","sourceDirName":"tutorials/Examples","slug":"/tutorials/Examples/grip","permalink":"/dobotplus/en/tutorials/Examples/grip","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorials","previous":{"title":"TCP/IP Control","permalink":"/dobotplus/en/tutorials/Examples/tcpip"}}');var o=r(65723),i=r(78573);const l={},s="Gripper Control",a={},c=[{value:"Plugin Initialization",id:"plugin-initialization",level:2},{value:"Plugin Workflow",id:"plugin-workflow",level:2},{value:"Control Functions",id:"control-functions",level:2},{value:"Network Requests",id:"network-requests",level:2},{value:"Status Synchronization",id:"status-synchronization",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Building the Plugin",id:"building-the-plugin",level:2}];function u(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"gripper-control",children:"Gripper Control"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"This example will complete the development of a suction cup plugin for gripping and releasing workpieces."}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"plugin-initialization",children:"Plugin Initialization"}),"\n",(0,o.jsxs)(e.p,{children:["The plugin initialization work can refer to the initialization process in the ",(0,o.jsx)(e.a,{href:"/dobotplus/en/tutorials/Examples/io",children:"IO Control Case"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"plugin-workflow",children:"Plugin Workflow"}),"\n",(0,o.jsx)(e.p,{children:"The workflow of this plugin is as follows:"}),"\n",(0,o.jsx)(e.mermaid,{value:"graph LR\r\nA[Grip Button]--\x3e|Click|B(Send Grip HTTP Request)--\x3e|Controller Invokes|C[httpApi Module Method]--\x3e|Parameter Processing, Reference|D[control.lua]\r\nA1[Release Button]--\x3e|Click|B1(Send Release HTTP Request)--\x3e|Controller Invokes|C[httpApi Module Method]\r\nA2[Status Display]--\x3e|Polling|B2(Create MQTT Client to Receive Messages)--\x3e|Controller Invokes|C[httpApi Module Method]\r\nD --\x3e|Modbus 485 Channel|E[End Effector]"}),"\n",(0,o.jsx)(e.h2,{id:"control-functions",children:"Control Functions"}),"\n",(0,o.jsxs)(e.p,{children:["Write ",(0,o.jsx)(e.code,{children:"control.lua"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"require(\"utils.util\")\r\nlocal numConvert = require('utils.num_convert')\r\nlocal control = {}\r\nlocal modbusID = nil\r\n\r\n-- Define the grip function to control the gripping operation\r\nfunction control.grip(id)\t\r\n\r\n    if modbusID == nil then\r\n        local err, _modbus = ModbusCreate(\"127.0.0.1\", 60000, id, true)\r\n        if err ~= 0 then\r\n            -- Failed to create Modbus connection\r\n            return nil\r\n        else\r\n            -- Successfully created Modbus connection\r\n            modbusID = _modbus\r\n        end\r\n    end\r\n\r\n    if modbusID ~= nil then\r\n        local gripCmd = tonumber('00001001'..'00000000', 2)\r\n        local gripParams = 0\r\n        WriteBy485(modbusID, 0x03E8, { gripCmd, gripParams })\r\n    end\r\nend\r\n\r\nfunction control.release(id)\t\r\n\r\n    if modbusID == nil then\r\n        local err, _modbus = ModbusCreate(\"127.0.0.1\", 60000, id, true)\r\n        if err ~= 0 then\r\n            -- Failed to create Modbus connection\r\n            return nil\r\n        else\r\n            -- Successfully created Modbus connection\r\n            modbusID = _modbus\r\n        end\r\n    end\r\n\r\n    if modbusID ~= nil then\r\n        local releaseCmd = tonumber('00001001'..'00000000', 2)\r\n        local releaseParams = 100\r\n        WriteBy485(modbusID, 0x03E8, { releaseCmd, releaseParams })\r\n    end\r\nend\r\n\r\n---@param id number\r\n---@return table|nil status\r\nfunction control.getStatus(id)\r\n    if modbusID == nil then\r\n        local err, _modbus = ModbusCreate(\"127.0.0.1\", 60000, id, true)\r\n        if err ~= 0 then\r\n            -- Failed to create Modbus connection\r\n            return nil\r\n        else\r\n            -- Successfully created Modbus connection\r\n            modbusID = _modbus\r\n        end\r\n    end\r\n\r\n    local status = false\r\n    if modbusID ~= nil then\r\n        Use485()\r\n        local registerData = GetHoldRegs(modbusID, 0x07D0, 3)\r\n        UnLock485()\r\n        if registerData[1] == nil then\r\n            return false\r\n        end\r\n        local bitData = numConvert.decimalToBinary(registerData[1])\r\n        return string.sub(bitData, -6, -5) == '11'\r\n    end\r\n\r\n    return status\r\nend\r\n\r\nreturn control\n"})}),"\n",(0,o.jsx)(e.h2,{id:"network-requests",children:"Network Requests"}),"\n",(0,o.jsxs)(e.p,{children:["Write ",(0,o.jsx)(e.code,{children:"httpAPI.lua"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:'local httpModule = {}\r\nlocal control = require("control")\r\n\r\n-- Define the grip function to control the gripping operation\r\nfunction httpModule.grip(params)\t\r\n    control.grip(params.id)\r\n    return {\r\n        status = true\r\n    }\r\nend\r\n\r\nfunction httpModule.release(params)\r\n    control.release(params.id)\r\n    return {\r\n        status = true\r\n    }\r\nend\r\n\r\nreturn httpModule\n'})}),"\n",(0,o.jsx)(e.h2,{id:"status-synchronization",children:"Status Synchronization"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Write ",(0,o.jsx)(e.code,{children:"lua/daemon.lua"})]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-lua",children:"local control = require('control')\r\n\r\nlocal function handleInLoop()\r\n    -- Default id for Epick suction cup is 9\r\n    local data = control.getStatus(9)\r\n    if data ~= nil or data ~= false then\r\n        mqtt.publish(data)\r\n    else\r\n        mqtt.publish({\r\n            status = false\r\n        })\r\n    end\r\nend\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Write ",(0,o.jsx)(e.code,{children:"ui/Main.tsx"})]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"import { Button, StatusLight } from '@dobot-plus/components'\r\nimport { useState } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { http } from '@dobot/http/http'\r\nimport { DobotPlusApp } from '@dobot/components/DobotPlusApp'\r\n\r\nfunction App() {\r\n    const { t } = useTranslation()\r\n\r\n    const [status, setStatus] = useState(false)\r\n\r\n    function handleButton1Click() { http.grip({id: 9 }) }\r\n\r\n    function handleButton2Click() { http.release({ id: 9 }) }\r\n\r\n    function handleMessage(data: object | string) {\r\n        if (typeof data === 'object') {\r\n            const { status } = data as { status: boolean }\r\n            setStatus(status)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <DobotPlusApp useMqtt={true} onMessage={handleMessage}>\r\n                <Button type=\"primary\" onClick={handleButton1Click}>Grip</Button>\r\n                <Button type=\"primary\" onClick={handleButton2Click}>Release</Button>\r\n                <StatusLight status={status ? 'success' : 'error'} \r\n                    statusText={status ? 'Normal' : 'Abnormal'}>\r\n                </StatusLight>\r\n            </DobotPlusApp>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\n"})}),"\n",(0,o.jsx)(e.h2,{id:"debugging",children:"Debugging"}),"\n",(0,o.jsx)(e.p,{children:"The debugging command for the plugin can perform the following two types of development work:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Debug only the page"}),"\n",(0,o.jsx)(e.li,{children:"Connect to a real device for debugging"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"dpt dev\n"})}),"\n",(0,o.jsx)(e.p,{children:"When executing the above command, the command line will prompt developers whether to connect a real device for testing."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"$ dpt dev\r\n? Debug lua on real device? Yes\r\n? Please check the device IP: 192.168.5.1 (y/n)\n"})}),"\n",(0,o.jsx)(e.p,{children:"Developers need to confirm:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Whether the actual IP of the controller is correct; the default is ",(0,o.jsx)(e.code,{children:"192.168.5.1"})]}),"\n",(0,o.jsx)(e.li,{children:"Whether the SFTP service-related configuration is correct"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["For detailed information on the above configurations, please refer to the ",(0,o.jsx)(e.code,{children:"dpt.json"})," configuration file."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\r\n  "ip": "192.168.5.1",                              // Controller IP\r\n  "pluginPort": 22100\r\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"building-the-plugin",children:"Building the Plugin"}),"\n",(0,o.jsx)(e.p,{children:"After completing the development, debugging, and optimization of the plugin, you can execute the final build work by running:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"dpt build\n"})}),"\n",(0,o.jsxs)(e.p,{children:["After the program executes successfully, there will be a ",(0,o.jsx)(e.code,{children:"dist"})," folder and an ",(0,o.jsx)(e.code,{children:"output"})," folder in the current directory."]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["The ",(0,o.jsx)(e.code,{children:"dist"})," folder contains the plugin code after this build, allowing developers to check the build results."]}),"\n",(0,o.jsxs)(e.li,{children:["The ",(0,o.jsx)(e.code,{children:"output"})," folder contains a compressed ",(0,o.jsx)(e.code,{children:"zip"})," file named in the format ",(0,o.jsx)(e.code,{children:"<plugin_name>-<version_number>.zip"}),", which is the plugin to be imported for actual use on the client."]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},78573:(n,e,r)=>{r.d(e,{R:()=>l,x:()=>s});var t=r(22155);const o={},i=t.createContext(o);function l(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);