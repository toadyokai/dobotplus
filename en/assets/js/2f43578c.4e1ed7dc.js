"use strict";(self.webpackChunk_dobot_plus_website=self.webpackChunk_dobot_plus_website||[]).push([[2479],{30104:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var i=t(65723),r=t(43327);const s={},o="Motion",l={id:"lua/motion",title:"Motion",description:"Command List",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/lua/08-motion.md",sourceDirName:"lua",slug:"/lua/motion",permalink:"/dobotplus/en/lua/motion",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"lua",previous:{title:"IO",permalink:"/dobotplus/en/lua/io"},next:{title:"Safe Skin",permalink:"/dobotplus/en/lua/safeskin"}},c={},a=[{value:"Command List",id:"command-list",level:2},{value:"MovJ",id:"movj",level:2},{value:"MovL",id:"movl",level:2},{value:"Arc",id:"arc",level:2},{value:"Circle",id:"circle",level:2},{value:"MovJIO",id:"movjio",level:2},{value:"MovLIO",id:"movlio",level:2},{value:"StartPath",id:"startpath",level:2},{value:"GetPathStartPose",id:"getpathstartpose",level:2},{value:"PositiveKin",id:"positivekin",level:2},{value:"InverseKin",id:"inversekin",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"motion",children:"Motion"})}),"\n",(0,i.jsx)(n.h2,{id:"command-list",children:"Command List"}),"\n",(0,i.jsx)(n.p,{children:"Motion commands are used to control the robotic arm's movement. Please read the general instructions before use."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Command"}),(0,i.jsx)(n.th,{children:"Function"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MovJ"}),(0,i.jsx)(n.td,{children:"Joint motion"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MovL"}),(0,i.jsx)(n.td,{children:"Linear motion"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Arc"}),(0,i.jsx)(n.td,{children:"Arc interpolation movement"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Circle"}),(0,i.jsx)(n.td,{children:"Full circle interpolation movement"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MovJIO"}),(0,i.jsx)(n.td,{children:"Joint motion with output DO"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MovLIO"}),(0,i.jsx)(n.td,{children:"Linear motion with output DO"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"StartPath"}),(0,i.jsx)(n.td,{children:"Reproduce recorded motion trajectory"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GetPathStartPose"}),(0,i.jsx)(n.td,{children:"Get the starting point of the trajectory"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"PositiveKin"}),(0,i.jsx)(n.td,{children:"Forward kinematics for joint angles"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"InverseKin"}),(0,i.jsx)(n.td,{children:"Inverse kinematics for poses"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"movj",children:"MovJ"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'MovJ(point, {user = 1, tool = 0, a = 20, v = 50, cp = 100, stopcond = "expression"})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Moves from the current position to the target point using joint motion."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"point: Target point."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"a: Acceleration ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"v: Speed ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"cp: Smoothing transition ratio. Range: [0,100]"}),"\n",(0,i.jsx)(n.li,{children:"stopcond: Stop condition expression, the current motion will end when this condition is met to execute the next command.\nFor more details, please refer to the general instructions."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- The robotic arm moves to point P1 with default settings.\nMovJ(P1)\n-- The robotic arm moves to the specified joint angle with default settings.\nMovJ({joint={0,0,90,0,90,0} })\n-- The robotic arm moves to a specific pose corresponding to user coordinate system 1 and tool coordinate system 1, with acceleration and speed both at 50%, and a smoothing transition ratio of 50%.\nMovJ({pose={300,200,300,180,0,0} },{user=1,tool=1,a=50,v=50,cp=50})\n-- First define a point and then call it in the motion command. The effect is the same as the previous command.\ncustomPoint={pose={300,200,300,180,0,0} }\nMovJ(customPoint,{user=1,tool=1,a=50,v=50,cp=50})\n-- The robotic arm moves to point P1, and the current motion will end if DI1 is ON during the movement.\nMovJ(P1,{stopcond="DI(1) == ON"})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"movl",children:"MovL"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'MovL(point, {user = 1, tool = 0, a = 20, v = 50, speed = 500, cp = 100, r = 5, stopcond = "expression"})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Moves from the current position to the target point using linear motion."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"point: Target point."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point. Invalid if the target point is a joint variable."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point. Invalid if the target point is a joint variable."}),"\n",(0,i.jsx)(n.li,{children:"a: Acceleration ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"v: Speed ratio for the robotic arm when executing this command, mutually exclusive with speed. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"speed: Target speed for the robotic arm when executing this command, mutually exclusive with v. If both exist, speed takes precedence. Range: [1, max speed], unit: mm/s"}),"\n",(0,i.jsx)(n.li,{children:"cp: Smoothing transition ratio, mutually exclusive with r. Range: [0,100]"}),"\n",(0,i.jsx)(n.li,{children:"r: Smoothing transition radius, mutually exclusive with cp. If both exist, r takes precedence. Range: [0,100], unit: mm"}),"\n",(0,i.jsx)(n.li,{children:"stopcond: Stop condition expression, the current motion will end when this condition is met to execute the next command.\nFor more details, please refer to the general instructions."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- The robotic arm moves to point P1 with default settings.\nMovL(P1)\n-- The robotic arm moves to point P1 with an absolute speed of 500 mm/s.\nMovL(P1,{speed=500})\n-- The robotic arm moves to the specified joint angle with default settings.\nMovL({joint={0,0,90,0,90,0} })\n-- The robotic arm moves to a specific pose corresponding to user coordinate system 1 and tool coordinate system 1, with acceleration and speed both at 50%, and a smoothing transition radius of 5 mm.\nMovL({pose={300,200,300,180,0,0} },{user=1,tool=1,a=50,v=50,r=5})\n-- First define a point and then call it in the motion command. The effect is the same as the previous command.\ncustomPoint={pose={300,200,300,180,0,0} }\nMovL(customPoint,{user=1,tool=1,a=50,v=50,r=5})\n-- Both speed and v are present; speed takes effect, and a corresponding warning log will be printed by the controller.\n-- Both cp and r are present; r takes effect, and a corresponding warning log will be printed by the controller.\nMovL(P1,{v=50,speed=500,cp=60,r=5}) -- Only optional parameters speed and r take effect during execution.\n-- The robotic arm moves to point P1, and the current motion will end if DI1 is ON during the movement.\nMovL(P1,{stopcond="DI(1) == ON"})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"arc",children:"Arc"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'Arc(P1, P2, {user = 1, tool = 0, a = 20, v = 50, speed = 500, cp = 100, r = 5, stopcond = "expression"})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Moves from the current position to the target point using arc interpolation."}),"\n",(0,i.jsx)(n.p,{children:"The arc is determined by the current position, P1, and P2, so the current position cannot be on the line determined by P1 and P2."}),"\n",(0,i.jsx)(n.p,{children:"The end posture of the robotic arm during the movement is calculated by interpolating between the current point and the posture of P2, and the posture at point P1 does not participate in the calculation (i.e., the posture of the robotic arm when reaching P1 may differ from the taught posture)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"P1: Intermediate point of the arc."}),"\n",(0,i.jsx)(n.li,{children:"P2: Target point."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"a: Acceleration ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"v: Speed ratio for the robotic arm when executing this command, mutually exclusive with speed. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"speed: Target speed for the robotic arm when executing this command, mutually exclusive with v. If both exist, speed takes precedence. Range: [1, max speed], unit: mm/s"}),"\n",(0,i.jsx)(n.li,{children:"cp: Smoothing transition ratio, mutually exclusive with r. Range: [0,100]"}),"\n",(0,i.jsx)(n.li,{children:"r: Smoothing transition radius, mutually exclusive with cp. If both exist, r takes precedence. Range: [0,100], unit: mm"}),"\n",(0,i.jsx)(n.li,{children:"stopcond: Stop condition expression, the current motion will end when this condition is met to execute the next command.\nFor more details, please refer to the general instructions."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- The robotic arm moves to P1, then uses default settings to move to P3 via P2 in an arc.\nMovJ(P1)\nArc(P2,P3)\n-- The robotic arm moves to P1, then uses the specified pose {300,200,300,180,0,0} to move to P3 via arc, with user coordinate system and tool coordinate system both set to 1, and acceleration and speed both at 50%.\nMovJ(P1)\nArc({pose={300,200,300,180,0,0} },P3,{user=1,tool=1,a=50,v=50})\n-- The robotic arm moves to P1, then the current motion will end if DI1 is ON during the arc movement to P3 via P2 using default settings.\nMovJ(P1)\nArc(P2,P3,{stopcond="DI(1) == ON"})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"circle",children:"Circle"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'Circle(P1, P2, Count, {user = 1, tool = 0, a = 20, v = 50, speed = 500, cp = 100, r = 5, stopcond = "expression"})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Performs full circle interpolation movement from the current position and returns to the current position after completing the specified number of circles."}),"\n",(0,i.jsx)(n.p,{children:"The circle is determined by the current position, P1, and P2, so the current position cannot be on the line determined by P1 and P2, and the circle defined by the three points cannot exceed the robotic arm's movement range."}),"\n",(0,i.jsx)(n.p,{children:"The end posture of the robotic arm during the movement is calculated by interpolating between the current point and the posture of P2, and the posture at point P1 does not participate in the calculation (i.e., the posture of the robotic"}),"\n",(0,i.jsx)(n.p,{children:"arm when reaching P1 may differ from the taught posture)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"P1: Intermediate point of the circle."}),"\n",(0,i.jsx)(n.li,{children:"P2: Target point."}),"\n",(0,i.jsx)(n.li,{children:"Count: Number of circles to be completed."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"a: Acceleration ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"v: Speed ratio for the robotic arm when executing this command, mutually exclusive with speed. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"speed: Target speed for the robotic arm when executing this command, mutually exclusive with v. If both exist, speed takes precedence. Range: [1, max speed], unit: mm/s"}),"\n",(0,i.jsx)(n.li,{children:"cp: Smoothing transition ratio, mutually exclusive with r. Range: [0,100]"}),"\n",(0,i.jsx)(n.li,{children:"r: Smoothing transition radius, mutually exclusive with cp. If both exist, r takes precedence. Range: [0,100], unit: mm"}),"\n",(0,i.jsx)(n.li,{children:"stopcond: Stop condition expression, the current motion will end when this condition is met to execute the next command.\nFor more details, please refer to the general instructions."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- The robotic arm moves to P1, then uses default settings to move to P3 via a full circle around P2.\nMovJ(P1)\nCircle(P2,P3,1)\n-- The robotic arm moves to P1, then uses the specified pose {300,200,300,180,0,0} to perform a full circle around P2, completing 10 circles, with user coordinate system and tool coordinate system both set to 1, and acceleration and speed both at 50%.\nMovJ(P1)\nCircle({pose={300,200,300,180,0,0} },P2,10,{user=1,tool=1,a=50,v=50})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"movjio",children:"MovJIO"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"MovJIO(P, { {Mode, Distance, Index, Status}, ...}, {user = 1, tool = 0, a = 20, v = 50, cp = 100})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Moves from the current position to the target point using joint motion while simultaneously setting the digital output port status."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s the translation of the provided text into English:"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"P"}),": Target point.",(0,i.jsx)(n.br,{}),"\n","Parallel digital output parameters: Set to trigger a specified digital output (DO) when the robotic arm moves to a specified distance or percentage. Multiple sets can be configured, each containing the following parameters:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mode"}),": Trigger mode. 0 indicates percentage triggering, while 1 indicates distance triggering. The system will synthesize the joint angles into an angle vector and calculate the angle difference between the endpoint and the starting point as the total distance of movement."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Distance"}),": Specified percentage/angle. Since the angle calculation uses the synthesized angle vector, it is recommended to use the percentage mode for a more intuitive effect."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsx)(n.strong,{children:"Distance"})," is a positive number, it represents the percentage/angle away from the starting point."]}),"\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsx)(n.strong,{children:"Distance"})," is a negative number, it represents the percentage/angle away from the target point."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.strong,{children:"Mode"})," is 0, ",(0,i.jsx)(n.strong,{children:"Distance"})," represents the percentage of the total angle. The value range is (0,100]."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.strong,{children:"Mode"})," is 1, ",(0,i.jsx)(n.strong,{children:"Distance"})," represents the angle value. Unit: \xb0."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Index"}),": The number of the DO terminal."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": The state of the DO to be set, where 0 and OFF indicate no signal, and 1 and ON indicate a signal is present."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"If you need further adjustments or additional translations, feel free to ask!"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"a: Acceleration ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"v: Speed ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"cp: Smoothing transition ratio. Range: [0,100]"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Mode"}),(0,i.jsx)(n.th,{children:"Distance"}),(0,i.jsx)(n.th,{children:"Index"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Positive"}),(0,i.jsx)(n.td,{children:"0-6"}),(0,i.jsx)(n.td,{children:"0 or 1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"Negative"}),(0,i.jsx)(n.td,{children:"0-6"}),(0,i.jsx)(n.td,{children:"0 or 1"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- The robotic arm moves to P1, setting DO2 to ON.\nMovJIO(P1, { {0, 30, 2, 1} })\n-- The robotic arm moves to P1, setting DO3 to OFF.\nMovJIO(P1, { {1, -15, 3, 0} })\n"})}),"\n",(0,i.jsx)(n.h2,{id:"movlio",children:"MovLIO"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"MovLIO(P, { {Mode, Distance, Index, Status}, ...}, {user = 1, tool = 0, a = 20, v = 50, speed = 500, cp = 100, r = 5})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Moves from the current position to the target point using linear motion while simultaneously setting the digital output port status."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"P"}),": Target point.",(0,i.jsx)(n.br,{}),"\n","Parallel digital output parameters: Set to trigger a specified digital output (DO) when the robotic arm moves to a specified distance or percentage. Multiple sets can be configured, each containing the following parameters:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mode"}),": Trigger mode. 0 indicates percentage triggering, while 1 indicates distance triggering."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Distance"}),": Specified percentage/distance."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsx)(n.strong,{children:"Distance"})," is a positive number, it represents the percentage/distance away from the starting point."]}),"\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsx)(n.strong,{children:"Distance"})," is a negative number, it represents the percentage/distance away from the target point."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.strong,{children:"Mode"})," is 0, ",(0,i.jsx)(n.strong,{children:"Distance"})," represents the percentage of the total distance. The value range is (0,100]."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.strong,{children:"Mode"})," is 1, ",(0,i.jsx)(n.strong,{children:"Distance"})," represents the distance value. Unit: mm."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Index"}),": The number of the DO terminal."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": The state of the DO to be set, where 0 and OFF indicate no signal, and 1 and ON indicate a signal is present."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point. Invalid if the target point is a joint variable."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point. Invalid if the target point is a joint variable."}),"\n",(0,i.jsx)(n.li,{children:"a: Acceleration ratio for the robotic arm when executing this command. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"v: Speed ratio for the robotic arm when executing this command, mutually exclusive with speed. Range: (0,100]"}),"\n",(0,i.jsx)(n.li,{children:"speed: Target speed for the robotic arm when executing this command, mutually exclusive with v. If both exist, speed takes precedence. Range: [1, max speed], unit: mm/s"}),"\n",(0,i.jsx)(n.li,{children:"cp: Smoothing transition ratio, mutually exclusive with r. Range: [0,100]"}),"\n",(0,i.jsx)(n.li,{children:"r: Smoothing transition radius, mutually exclusive with cp. If both exist, r takes precedence. Range: [0,100], unit: mm"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Mode"}),(0,i.jsx)(n.th,{children:"Distance"}),(0,i.jsx)(n.th,{children:"Index"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Positive"}),(0,i.jsx)(n.td,{children:"0-6"}),(0,i.jsx)(n.td,{children:"0 or 1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"Negative"}),(0,i.jsx)(n.td,{children:"0-6"}),(0,i.jsx)(n.td,{children:"0 or 1"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- The robotic arm moves to P1, setting DO2 to ON.\nMovLIO(P1, { {0, 30, 2, 1} })\n-- The robotic arm moves to P1, setting DO3 to OFF.\nMovLIO(P1, { {1, -15, 3, 0} })\n"})}),"\n",(0,i.jsx)(n.h2,{id:"startpath",children:"StartPath"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"StartPath(string, {multi = 1, isConst = 0, sample = 50, freq = 0.2, user = 0, tool = 0})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Reproduces the recorded trajectory from the specified trajectory file. Before calling this command, the user must manually move the robotic arm to the starting point of the trajectory."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"string: Path name."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"multi: Multiplier for the trajectory speed. Default is 1."}),"\n",(0,i.jsx)(n.li,{children:"isConst: Whether to maintain a constant speed while reproducing the trajectory. 0 means normal reproduction; 1 means constant speed."}),"\n",(0,i.jsx)(n.li,{children:"sample: Sampling interval for the trajectory. Default is 50 ms."}),"\n",(0,i.jsx)(n.li,{children:"freq: Frequency of trajectory reproduction. Default is 0.2 Hz."}),"\n",(0,i.jsx)(n.li,{children:"user: User coordinate system."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Get the starting point of the trajectory from "track.csv", then move the robotic arm to that starting point.\nlocal StartPoint = GetPathStartPose("track.csv")\nMovJ(StartPoint)\n-- Reproduce the trajectory with a speed multiplier of 2.\nStartPath("track.csv", {multi = 2, isConst = 0})\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getpathstartpose",children:"GetPathStartPose"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"GetPathStartPose(string)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Gets the starting point of the trajectory."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"string: Path name."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- Get the starting point of the trajectory from "track.csv".\nlocal StartPoint = GetPathStartPose("track.csv")\nprint(StartPoint)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"positivekin",children:"PositiveKin"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"PositiveKin(joint, {user = 1, tool = 0})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Performs forward kinematics, providing the joint angles of the robotic arm to calculate its end-effector position in the given Cartesian coordinate system."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"joint: Joint angles."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Calculate the end-effector position for the given joint angles.\nPositiveKin({joint={0, 0, 90, 0, 90, 0} })\n"})}),"\n",(0,i.jsx)(n.h2,{id:"inversekin",children:"InverseKin"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"InverseKin(pose, {user = 1, tool = 0})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Description:"})}),"\n",(0,i.jsx)(n.p,{children:"Performs inverse kinematics to calculate the joint angles of the robotic arm based on the given end-effector pose."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"pose: Target pose."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: User coordinate system of the target point."}),"\n",(0,i.jsx)(n.li,{children:"tool: Tool coordinate system of the target point."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"-- Calculate the joint angles for the given end-effector pose.\nInverseKin({pose={300, 200, 300, 180, 0, 0} })\n"})}),"\n",(0,i.jsx)(n.p,{children:"The above provides detailed descriptions and examples for each motion command. When using these commands, please select the appropriate command and parameter configuration based on your specific needs."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},43327:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(22155);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);