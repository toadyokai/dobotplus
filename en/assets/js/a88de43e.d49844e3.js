"use strict";(self.webpackChunk_dobot_plus_website=self.webpackChunk_dobot_plus_website||[]).push([[5379],{534:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var a=r(65723),i=r(43327);const s={},t="Basic Syntax",l={id:"lua/grammer",title:"Basic Syntax",description:"Example",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/lua/01-grammer.md",sourceDirName:"lua",slug:"/lua/grammer",permalink:"/dobotplus/en/lua/grammer",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"lua",next:{title:"Operators in Lua",permalink:"/dobotplus/en/lua/operator"}},d={},o=[{value:"Example",id:"example",level:2},{value:"Example 1: Local vs. Global Variable Scope",id:"example-1-local-vs-global-variable-scope",level:3},{value:"Example 2: Local Variables Can Shadow Global Variables",id:"example-2-local-variables-can-shadow-global-variables",level:3},{value:"Example 3: Global Variables and Their Behavior",id:"example-3-global-variables-and-their-behavior",level:3},{value:"Numbers",id:"numbers",level:2},{value:"Booleans",id:"booleans",level:2},{value:"Strings",id:"strings",level:2},{value:"Example:",id:"example-1",level:3},{value:"Tables",id:"tables",level:2},{value:"Example 1:",id:"example-1-1",level:3},{value:"Example 2:",id:"example-2",level:3},{value:"Arrays",id:"arrays",level:2},{value:"One-Dimensional Array:",id:"one-dimensional-array",level:3},{value:"Multi-Dimensional Array:",id:"multi-dimensional-array",level:3},{value:"Example 1: One-Dimensional Array",id:"example-1-one-dimensional-array",level:3},{value:"Example 2: A 3x3 Multi-Dimensional Array",id:"example-2-a-3x3-multi-dimensional-array",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"basic-syntax",children:"Basic Syntax"})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["In the examples below, the content after the two dashes (",(0,a.jsx)(n.code,{children:"--"}),") represents a single-line comment."]}),"\n",(0,a.jsx)(n.h3,{id:"example-1-local-vs-global-variable-scope",children:"Example 1: Local vs. Global Variable Scope"}),"\n",(0,a.jsx)(n.p,{children:"This example illustrates the difference between local variables and script-level variables in terms of scope."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"function func()     -- Define a function that prints a and b when run\n    local a = 1     -- Local variable\n    b = 2           -- Script-level variable\n    print(a)          \n    print(b)        \nend\n\nfunc()            -- Execute the function, printing values of a and b as 1 and 2\nprint(a)          -- nil (Accessing outside of the variable scope, prints nil)\nprint(b)          -- 2\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-2-local-variables-can-shadow-global-variables",children:"Example 2: Local Variables Can Shadow Global Variables"}),"\n",(0,a.jsxs)(n.p,{children:["This example shows that local variables can share names with global variables, but only the local variable is effective within the function. The blocks of code defined by ",(0,a.jsx)(n.code,{children:"do/end"}),", as well as loops and conditionals, also fall under this rule."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'a = "a"\n\nfor i=10,1,-1 do\n    do\n        local a = 6     -- Local variable\n        print(a)        -- 6 (The local variable a is used here)\n    end\nend\n\nprint(a)            -- a (The global variable a is used here)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-3-global-variables-and-their-behavior",children:"Example 3: Global Variables and Their Behavior"}),"\n",(0,a.jsx)(n.p,{children:"This example highlights the difference between global variables and the two other variable scopes, as well as the persistent nature of global variables."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'-- src0.lua in Project 1\n-- Assume two global variables g1 and g2 have been added\n-- g1 is non-persistent and has a value of 10\n-- g2 is persistent and has a value of 20\n\nlocal a = 1\nb = 2\nprint(a)            -- 1\nprint(b)            -- 2\n\nprint(g1)           -- 10\nprint(g2)           -- 20\nSetGlobalVariable("g1", 11)  -- Assign value to the non-persistent global variable\nSetGlobalVariable("g2", 22)  -- Assign value to the persistent global variable\nprint(g1)           -- 11\nprint(g2)           -- 22\n\n-- src0.lua in Project 2\n-- Project 2 runs after Project 1\n\nprint(a)            -- nil\nprint(b)            -- nil\nprint(g1)           -- 10 (The non-persistent variable returns to its original value)\nprint(g2)           -- 22 (The persistent variable reflects the modification from Project 1)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Variable names can be any string made up of letters, underscores, and digits, provided they do not begin with a digit and do not include reserved keywords in Lua."}),"\n",(0,a.jsx)(n.p,{children:"In Lua, variables do not require type definitions. You simply assign a value, and Lua will automatically determine the variable's type. You can change a variable's type by assigning it a value of a different type. However, variables defined in the \"Monitoring > Global Variables\" page must retain their original types; otherwise, an error will occur when the script runs."}),"\n",(0,a.jsx)(n.p,{children:"Lua supports multiple data types, including numbers (number), booleans (boolean), strings (string), and tables (table). Arrays in Lua are a type of table."}),"\n",(0,a.jsxs)(n.p,{children:["Another special data type in Lua is ",(0,a.jsx)(n.code,{children:"nil"}),", which represents an empty value (no valid value). For example, printing a variable that has not been assigned a value will output ",(0,a.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"numbers",children:"Numbers"}),"\n",(0,a.jsxs)(n.p,{children:["In Lua, the ",(0,a.jsx)(n.code,{children:"number"})," type is a double-precision floating-point number and supports various operations. The following representations are all considered ",(0,a.jsx)(n.code,{children:"number"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"2"}),"\n",(0,a.jsx)(n.li,{children:"2.2"}),"\n",(0,a.jsx)(n.li,{children:"0.2"}),"\n",(0,a.jsx)(n.li,{children:"2e+1"}),"\n",(0,a.jsx)(n.li,{children:"0.2e-1"}),"\n",(0,a.jsx)(n.li,{children:"7.8263692594256e-06"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"booleans",children:"Booleans"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"boolean"})," type has only two possible values: ",(0,a.jsx)(n.code,{children:"true"})," (true) and ",(0,a.jsx)(n.code,{children:"false"})," (false). Lua treats ",(0,a.jsx)(n.code,{children:"false"})," and ",(0,a.jsx)(n.code,{children:"nil"})," as false; everything else is considered true, including the number ",(0,a.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"string"})," is a sequence of characters composed of letters, numbers, and underscores. Strings can be represented in three ways:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A sequence of characters enclosed in single quotes."}),"\n",(0,a.jsx)(n.li,{children:"A sequence of characters enclosed in double quotes."}),"\n",(0,a.jsxs)(n.li,{children:["A sequence of characters enclosed in double square brackets (",(0,a.jsx)(n.code,{children:"[["})," and ",(0,a.jsx)(n.code,{children:"]]"}),")."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"When performing arithmetic operations on a numeric string, Lua attempts to convert the string to a number."}),"\n",(0,a.jsx)(n.p,{children:"Lua provides many methods to support string operations:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.upper(argument)"})}),(0,a.jsx)(n.td,{children:"Converts the entire string to uppercase."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.lower(argument)"})}),(0,a.jsx)(n.td,{children:"Converts the entire string to lowercase."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.gsub(mainString, findString, replaceString, num)"})}),(0,a.jsxs)(n.td,{children:["Replaces occurrences of ",(0,a.jsx)(n.code,{children:"findString"})," with ",(0,a.jsx)(n.code,{children:"replaceString"})," in ",(0,a.jsx)(n.code,{children:"mainString"}),"; ",(0,a.jsx)(n.code,{children:"num"})," specifies the number of replacements (optional)."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.find(str, substr, [init, [end]])"})}),(0,a.jsxs)(n.td,{children:["Searches for ",(0,a.jsx)(n.code,{children:"substr"})," within ",(0,a.jsx)(n.code,{children:"str"})," and returns the starting and ending indices of the found substring, or ",(0,a.jsx)(n.code,{children:"nil"})," if not found."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.reverse(arg)"})}),(0,a.jsx)(n.td,{children:"Reverses the string."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.format(...)"})}),(0,a.jsxs)(n.td,{children:["Returns a formatted string similar to ",(0,a.jsx)(n.code,{children:"printf"}),"."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"string.char(arg)"})," and ",(0,a.jsx)(n.code,{children:"string.byte(arg[, int])"})]}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"char"})," converts an integer to a character, and ",(0,a.jsx)(n.code,{children:"byte"})," converts a character to its integer value (default is the first character)."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.len(arg)"})}),(0,a.jsx)(n.td,{children:"Returns the length of the string."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.rep(string, n)"})}),(0,a.jsxs)(n.td,{children:["Returns ",(0,a.jsx)(n.code,{children:"n"})," copies of the string."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:".."})}),(0,a.jsx)(n.td,{children:"Concatenates two strings."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.gmatch(str, pattern)"})}),(0,a.jsxs)(n.td,{children:["Returns an iterator function that yields the next substring matching ",(0,a.jsx)(n.code,{children:"pattern"})," found in ",(0,a.jsx)(n.code,{children:"str"}),"."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.match(str, pattern, init)"})}),(0,a.jsxs)(n.td,{children:["Finds the first match in ",(0,a.jsx)(n.code,{children:"str"})," for ",(0,a.jsx)(n.code,{children:"pattern"})," and returns captured results; if no match is found, returns ",(0,a.jsx)(n.code,{children:"nil"}),"."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"string.sub(s, i [, j])"})}),(0,a.jsxs)(n.td,{children:["Extracts a substring from ",(0,a.jsx)(n.code,{children:"s"}),", starting at ",(0,a.jsx)(n.code,{children:"i"})," and ending at ",(0,a.jsx)(n.code,{children:"j"})," (default is ",(0,a.jsx)(n.code,{children:"-1"}),", the last character)."]})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'str = "Lua"\nprint(string.upper(str))       -- Converts to uppercase: LUA\nprint(string.lower(str))       -- Converts to lowercase: lua\nprint(string.reverse(str))     -- Reverses the string: aul\nprint(string.len("abc"))       -- Length of "abc": 3\nprint(string.format("the value is: %d", 4))  -- Formatted output: the value is: 4\nprint(string.rep(str, 2))      -- Copies the string twice: LuaLua\nstring1 = "cn."\nstring2 = "dobot"\nstring3 = ".cc"\nprint("Connected string: ", string1 .. string2 .. string3)  -- Concatenates strings: cn.dobot.cc\n\nstring1 = [[aaaa]]\nprint(string.gsub(string1, "a", "z", 3))  -- Replaces in the string: zzza\n\nprint(string.find("Hello Lua user", "Lua", 1))  -- Searches for "Lua", prints indices: 7, 9\n\nsourcestr = "prefix--runoobgoogletaobao--suffix"\nsub = string.sub(sourcestr, 1, 8)  -- Extracts the prefix\nprint("\\nExtracted: ", string.format("%q", sub))  -- Prints: Extracted: "prefix--"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"tables",children:"Tables"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"table"})," is a collection of data with associated indices."]}),"\n",(0,a.jsxs)(n.p,{children:["The simplest constructor is ",(0,a.jsx)(n.code,{children:"{}"}),", which creates an empty table. Tables can be directly initialized."]}),"\n",(0,a.jsxs)(n.p,{children:["Tables are essentially associative arrays, allowing any type of value to be used as an index, except ",(0,a.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Tables are dynamically sized and can be resized as needed."}),"\n",(0,a.jsxs)(n.p,{children:["You can retrieve the length of a table using the ",(0,a.jsx)(n.code,{children:"#"})," operator."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'tbl = {[1] = 2, [2] = 6, [3] = 34, [4] = 5}\nprint("Table length: ", #tbl)  -- Prints: 4\n'})}),"\n",(0,a.jsx)(n.p,{children:"Lua provides many methods for table manipulation:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"table.concat(table [, sep [, start [, end]]])"})}),(0,a.jsxs)(n.td,{children:["Concatenates elements of the specified table from ",(0,a.jsx)(n.code,{children:"start"})," to ",(0,a.jsx)(n.code,{children:"end"}),", using the optional separator ",(0,a.jsx)(n.code,{children:"sep"}),"."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"table.insert(table, [pos,] value)"})}),(0,a.jsxs)(n.td,{children:["Inserts ",(0,a.jsx)(n.code,{children:"value"})," at position ",(0,a.jsx)(n.code,{children:"pos"})," in the table (default is at the end)."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"table.remove(table [, pos])"})}),(0,a.jsxs)(n.td,{children:["Removes and returns the element at position ",(0,a.jsx)(n.code,{children:"pos"})," in the table (default is the last element)."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"table.sort(table [, comp])"})}),(0,a.jsx)(n.td,{children:"Sorts the given table in ascending order."})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"example-1-1",children:"Example 1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'fruits = {}  -- Initialize table\nfruits = {"banana", "orange", "apple"}  -- Assign values\n\nprint("Concatenated string: ", table.concat(fruits, ", ", 2, 3))  -- Concatenates specified indices: orange, apple\n\n-- Insert at the end\ntable.insert(fruits, "mango")\nprint("Element at index 4: ", fruits[4])  -- Prints: Element at index 4: mango\n\n-- Insert at index 2\ntable.insert(fruits, 2, "grapes")\nprint("Element at index 2: ", fruits[2])  -- Prints: Element at index 2: grapes\n\nprint("Last element: ",\n\n fruits[5])  -- Prints: Last element: mango\ntable.remove(fruits)\nprint("Last element after removal: ", fruits[5])  -- Prints: Last element after removal: nil\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-2",children:"Example 2:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'fruits = {"banana", "orange", "apple", "grapes"}\nprint("Before sorting:")\nfor k, v in ipairs(fruits) do\n    print(v)  -- Prints: banana orange apple grapes\nend\n\n-- Sort in ascending order\ntable.sort(fruits)\nprint("After sorting:")\nfor k, v in ipairs(fruits) do\n    print(v)  -- Prints: apple banana grapes orange\nend\n'})}),"\n",(0,a.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,a.jsx)(n.p,{children:"An array is a collection of elements of the same data type arranged in a specific order. Arrays can be one-dimensional or multi-dimensional."}),"\n",(0,a.jsx)(n.h3,{id:"one-dimensional-array",children:"One-Dimensional Array:"}),"\n",(0,a.jsx)(n.p,{children:"The simplest array, whose logical structure is a linear list."}),"\n",(0,a.jsx)(n.h3,{id:"multi-dimensional-array",children:"Multi-Dimensional Array:"}),"\n",(0,a.jsx)(n.p,{children:"An array that contains other arrays, with each index corresponding to an array."}),"\n",(0,a.jsx)(n.h3,{id:"example-1-one-dimensional-array",children:"Example 1: One-Dimensional Array"}),"\n",(0,a.jsxs)(n.p,{children:["You can use a ",(0,a.jsx)(n.code,{children:"for"})," loop to iterate through the elements of a one-dimensional array. Accessing an index that has no value returns ",(0,a.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'array = {"Lua", "Tutorial"}  -- Create a one-dimensional array     \nfor i = 0, 2 do\n   print(array[i])  -- Prints: nil Lua Tutorial\nend\n\n-- In Lua, the index value starts at 1, but you can also specify 0. Additionally, negative numbers can be used as array indices.\narray = {}\nfor i = -2, 2 do\n   array[i] = i * 2 + 1  -- Assign values to the one-dimensional array\nend\nfor i = -2, 2 do\n   print(array[i])  -- Prints: -3 -1 1 3 5\nend\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-2-a-3x3-multi-dimensional-array",children:"Example 2: A 3x3 Multi-Dimensional Array"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:"-- Initialize the array\narray = {}\nfor i = 1, 3 do\n array[i] = {}\n for j = 1, 3 do\n   array[i][j] = i * j\n end\nend\n\n-- Access the array\nfor i = 1, 3 do\n for j = 1, 3 do\n    print(array[i][j])  -- Prints: 1 2 3 2 4 6 3 6 9\n end\nend\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},43327:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var a=r(22155);const i={},s=a.createContext(i);function t(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);