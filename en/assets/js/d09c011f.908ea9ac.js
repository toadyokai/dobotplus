"use strict";(self.webpackChunk_dobot_plus_website=self.webpackChunk_dobot_plus_website||[]).push([[9875],{62502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>a,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=t(65723),r=t(43327);const l={},d="End Effector",o={id:"lua/tool",title:"End Effector",description:"Command List",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/lua/06-tool.md",sourceDirName:"lua",slug:"/lua/tool",permalink:"/dobotplus/en/lua/tool",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"lua",previous:{title:"TCP/UDP",permalink:"/dobotplus/en/lua/tcp"},next:{title:"IO",permalink:"/dobotplus/en/lua/io"}},i={},c=[{value:"Command List",id:"command-list",level:2},{value:"ToolDI",id:"tooldi",level:2},{value:"ToolDO",id:"tooldo",level:2},{value:"GetToolDO",id:"gettooldo",level:2},{value:"ToolAI",id:"toolai",level:2},{value:"SetToolMode",id:"settoolmode",level:2},{value:"SetToolPower",id:"settoolpower",level:2},{value:"SetTool485",id:"settool485",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"end-effector",children:"End Effector"})}),"\n",(0,s.jsx)(n.h2,{id:"command-list",children:"Command List"}),"\n",(0,s.jsx)(n.p,{children:"The end effector commands are used for reading and writing the mechanical arm's end I/O states and setting related parameters."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Command"}),(0,s.jsx)(n.th,{children:"Function"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ToolDI"}),(0,s.jsx)(n.td,{children:"Read the status of the end digital input ports"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ToolDO"}),(0,s.jsx)(n.td,{children:"Set the status of the end digital output ports (queue command)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GetToolDO"}),(0,s.jsx)(n.td,{children:"Get the current status of the end digital output ports"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ToolAI"}),(0,s.jsx)(n.td,{children:"Read the value of the end analog input ports"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SetToolMode"}),(0,s.jsx)(n.td,{children:"Set the communication mode of the end multipurpose terminal"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SetToolPower"}),(0,s.jsx)(n.td,{children:"Set the power state of the end tool"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SetTool485"}),(0,s.jsx)(n.td,{children:"Set the data format corresponding to the RS485 interface of the end tool"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"tooldi",children:"ToolDI"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"ToolDI(index)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the status of the end digital input port."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"}),": The number of the end DI terminal."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The status of the corresponding DI terminal (ON/OFF)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- If end DI1 is ON, move the mechanical arm to point P1 in a linear motion.\nif (ToolDI(1) == ON) then\n    MovL(P1)\nend\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"tooldo",children:"ToolDO"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"ToolDO(index, ON|OFF)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"Sets the status of the end digital output port."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"}),": The number of the end DO terminal."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ON|OFF"}),": The status to set the DO port."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Set end DO1 to ON.\nToolDO(1, ON)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"gettooldo",children:"GetToolDO"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"GetToolDO(index)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"Gets the current status of the end digital output port."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"}),": The number of the end DO terminal."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The status of the corresponding end DO terminal (ON/OFF)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Get the current status of end DO1.\nGetToolDO(1)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"toolai",children:"ToolAI"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"ToolAI(index)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsxs)(n.p,{children:["Reads the value of the end analog input port. Before using, you need to set the terminal to analog input mode using ",(0,s.jsx)(n.code,{children:"SetToolMode"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"}),"\nNo effect if the mechanical arm does not have an end AI interface."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"}),": The number of the end AI terminal."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The value of the corresponding AI terminal."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Read the value of end AI1 and assign it to the variable test.\ntest = ToolAI(1)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"settoolmode",children:"SetToolMode"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"SetToolMode(mode, type, identify)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"For mechanical arms with end AI1 and AI2 interfaces and RS485 interface multiplexing (CR and CR A series), this interface can set the mode of the end multiplexing terminal. The default mode is RS485 mode."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"}),"\nNo effect if the mechanical arm does not support mode switching."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mode"}),": The mode of the multiplexing terminal","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1"}),": RS485 mode."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2"}),": Analog input mode."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"}),": When ",(0,s.jsx)(n.code,{children:"mode"})," is ",(0,s.jsx)(n.code,{children:"1"}),", this parameter is invalid. When ",(0,s.jsx)(n.code,{children:"mode"})," is ",(0,s.jsx)(n.code,{children:"2"}),", this parameter sets the mode of the analog input. The units represent the mode for AI1 and AI2, with tens place indicating AI2. Mode options:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"0"}),": 0~10V voltage input mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1"}),": Current collection mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2"}),": 0~5V voltage input mode"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Optional Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"identify"}),": When the mechanical arm has multiple end connectors, specifies the connector. ",(0,s.jsx)(n.code,{children:"1"})," indicates connector 1, ",(0,s.jsx)(n.code,{children:"2"})," indicates connector 2."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Set the end multiplexing terminal to analog input, both paths to 0~10V voltage input mode.\nSetToolMode(2, 0)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"settoolpower",children:"SetToolPower"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"SetToolPower(status)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"Sets the power state of the end tool, generally used to restart the end power supply, such as re-powering and initializing the end gripper. If continuous calls to this interface are needed, it is recommended to wait at least 4ms between calls."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"}),"\nClosing the end power supply will also disable the end DO."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"status"}),": The power state of the end tool, ",(0,s.jsx)(n.code,{children:"0"}),": turn off power; ",(0,s.jsx)(n.code,{children:"1"}),": turn on power."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Restart the power supply for the end tool.\nSetToolPower(0)\nWait(5)\nSetToolPower(1)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"settool485",children:"SetTool485"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prototype:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"SetTool485(baud, parity, stopbit, identify)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Description:"})}),"\n",(0,s.jsx)(n.p,{children:"Sets the data format corresponding to the RS485 interface of the end tool."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"}),"\nNo effect if the mechanical arm does not have an end RS485 interface."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"baud"}),": The baud rate of the RS485 interface."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Optional Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parity"}),": Whether there is a parity bit. ",(0,s.jsx)(n.code,{children:'"O"'})," indicates odd parity, ",(0,s.jsx)(n.code,{children:'"E"'})," indicates even parity, ",(0,s.jsx)(n.code,{children:'"N"'})," indicates no parity. The default value is ",(0,s.jsx)(n.code,{children:'"N"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stopbit"}),": Length of the stop bit. Valid values: ",(0,s.jsx)(n.code,{children:"0.5"}),", ",(0,s.jsx)(n.code,{children:"1"}),", ",(0,s.jsx)(n.code,{children:"1.5"}),", ",(0,s.jsx)(n.code,{children:"2"}),". Values within \xb10.1 will be automatically rounded (e.g., ",(0,s.jsx)(n.code,{children:"0.4001"})," rounds to ",(0,s.jsx)(n.code,{children:"0.5"}),", ",(0,s.jsx)(n.code,{children:"0.3999"})," results in an error, ",(0,s.jsx)(n.code,{children:"1.09999"})," rounds to ",(0,s.jsx)(n.code,{children:"1"}),"). The default value is ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"identify"}),": When the mechanical arm has multiple end connectors, specifies the connector. ",(0,s.jsx)(n.code,{children:"1"})," indicates connector 1, ",(0,s.jsx)(n.code,{children:"2"})," indicates connector 2."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:'-- Set the baud rate of the RS485 interface of the end tool to 115200Hz, no parity, and stop bit length of 1.\nSetTool485(115200, "N", 1)\n'})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},43327:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var s=t(22155);const r={},l=s.createContext(r);function d(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);