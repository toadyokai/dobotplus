"use strict";(self.webpackChunk_dobot_plus_website=self.webpackChunk_dobot_plus_website||[]).push([[4337],{6721:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var o=t(65723),i=t(43327);const l={},r="Gripper Control",s={id:"tutorials/examples/grip",title:"Gripper Control",description:"This example will complete the development of a suction cup plugin for gripping and releasing workpieces.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/tutorials/examples/04-grip.md",sourceDirName:"tutorials/examples",slug:"/tutorials/examples/grip",permalink:"/dobotplus/en/tutorials/examples/grip",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorials",previous:{title:"TCP/IP Control",permalink:"/dobotplus/en/tutorials/examples/tcpip"}},a={},c=[{value:"Plugin Initialization",id:"plugin-initialization",level:2},{value:"Plugin Workflow",id:"plugin-workflow",level:2},{value:"Control Functions",id:"control-functions",level:2},{value:"Network Requests",id:"network-requests",level:2},{value:"Status Synchronization",id:"status-synchronization",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Building the Plugin",id:"building-the-plugin",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"gripper-control",children:"Gripper Control"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"This example will complete the development of a suction cup plugin for gripping and releasing workpieces."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"plugin-initialization",children:"Plugin Initialization"}),"\n",(0,o.jsxs)(n.p,{children:["The plugin initialization work can refer to the initialization process in the ",(0,o.jsx)(n.a,{href:"/dobotplus/en/tutorials/examples/io",children:"IO Control Case"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"plugin-workflow",children:"Plugin Workflow"}),"\n",(0,o.jsx)(n.p,{children:"The workflow of this plugin is as follows:"}),"\n",(0,o.jsx)(n.mermaid,{value:"graph LR\nA[Grip Button]--\x3e|Click|B(Send Grip HTTP Request)--\x3e|Controller Invokes|C[httpApi Module Method]--\x3e|Parameter Processing, Reference|D[control.lua]\nA1[Release Button]--\x3e|Click|B1(Send Release HTTP Request)--\x3e|Controller Invokes|C[httpApi Module Method]\nA2[Status Display]--\x3e|Polling|B2(Create MQTT Client to Receive Messages)--\x3e|Controller Invokes|C[httpApi Module Method]\nD --\x3e|Modbus 485 Channel|E[End Effector]"}),"\n",(0,o.jsx)(n.h2,{id:"control-functions",children:"Control Functions"}),"\n",(0,o.jsxs)(n.p,{children:["Write ",(0,o.jsx)(n.code,{children:"control.lua"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"require(\"utils.util\")\nlocal numConvert = require('utils.num_convert')\nlocal control = {}\nlocal modbusID = nil\n\n-- Define the grip function to control the gripping operation\nfunction control.grip(id)\t\n\n    if modbusID == nil then\n        local err, _modbus = ModbusCreate(\"127.0.0.1\", 60000, id, true)\n        if err ~= 0 then\n            -- Failed to create Modbus connection\n            return nil\n        else\n            -- Successfully created Modbus connection\n            modbusID = _modbus\n        end\n    end\n\n    if modbusID ~= nil then\n        local gripCmd = tonumber('00001001'..'00000000', 2)\n        local gripParams = 0\n        WriteBy485(modbusID, 0x03E8, { gripCmd, gripParams })\n    end\nend\n\nfunction control.release(id)\t\n\n    if modbusID == nil then\n        local err, _modbus = ModbusCreate(\"127.0.0.1\", 60000, id, true)\n        if err ~= 0 then\n            -- Failed to create Modbus connection\n            return nil\n        else\n            -- Successfully created Modbus connection\n            modbusID = _modbus\n        end\n    end\n\n    if modbusID ~= nil then\n        local releaseCmd = tonumber('00001001'..'00000000', 2)\n        local releaseParams = 100\n        WriteBy485(modbusID, 0x03E8, { releaseCmd, releaseParams })\n    end\nend\n\n---@param id number\n---@return table|nil status\nfunction control.getStatus(id)\n    if modbusID == nil then\n        local err, _modbus = ModbusCreate(\"127.0.0.1\", 60000, id, true)\n        if err ~= 0 then\n            -- Failed to create Modbus connection\n            return nil\n        else\n            -- Successfully created Modbus connection\n            modbusID = _modbus\n        end\n    end\n\n    local status = false\n    if modbusID ~= nil then\n        Use485()\n        local registerData = GetHoldRegs(modbusID, 0x07D0, 3)\n        UnLock485()\n        if registerData[1] == nil then\n            return false\n        end\n        local bitData = numConvert.decimalToBinary(registerData[1])\n        return string.sub(bitData, -6, -5) == '11'\n    end\n\n    return status\nend\n\nreturn control\n"})}),"\n",(0,o.jsx)(n.h2,{id:"network-requests",children:"Network Requests"}),"\n",(0,o.jsxs)(n.p,{children:["Write ",(0,o.jsx)(n.code,{children:"httpAPI.lua"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local httpModule = {}\nlocal control = require("control")\n\n-- Define the grip function to control the gripping operation\nfunction httpModule.grip(params)\t\n    control.grip(params.id)\n    return {\n        status = true\n    }\nend\n\nfunction httpModule.release(params)\n    control.release(params.id)\n    return {\n        status = true\n    }\nend\n\nreturn httpModule\n'})}),"\n",(0,o.jsx)(n.h2,{id:"status-synchronization",children:"Status Synchronization"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Write ",(0,o.jsx)(n.code,{children:"lua/daemon.lua"})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"local control = require('control')\n\nlocal function handleInLoop()\n    -- Default id for Epick suction cup is 9\n    local data = control.getStatus(9)\n    if data ~= nil or data ~= false then\n        mqtt.publish(data)\n    else\n        mqtt.publish({\n            status = false\n        })\n    end\nend\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Write ",(0,o.jsx)(n.code,{children:"ui/Main.tsx"})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { Button, StatusLight } from '@dobot-plus/components'\nimport { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { http } from '@dobot/http/http'\nimport { DobotPlusApp } from '@dobot/components/DobotPlusApp'\n\nfunction App() {\n    const { t } = useTranslation()\n\n    const [status, setStatus] = useState(false)\n\n    function handleButton1Click() { http.grip({id: 9 }) }\n\n    function handleButton2Click() { http.release({ id: 9 }) }\n\n    function handleMessage(data: object | string) {\n        if (typeof data === 'object') {\n            const { status } = data as { status: boolean }\n            setStatus(status)\n        }\n    }\n\n    return (\n        <div className=\"app\">\n            <DobotPlusApp useMqtt={true} onMessage={handleMessage}>\n                <Button type=\"primary\" onClick={handleButton1Click}>Grip</Button>\n                <Button type=\"primary\" onClick={handleButton2Click}>Release</Button>\n                <StatusLight status={status ? 'success' : 'error'} \n                    statusText={status ? 'Normal' : 'Abnormal'}>\n                </StatusLight>\n            </DobotPlusApp>\n        </div>\n    )\n}\n\nexport default App\n"})}),"\n",(0,o.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,o.jsx)(n.p,{children:"The debugging command for the plugin can perform the following two types of development work:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Debug only the page"}),"\n",(0,o.jsx)(n.li,{children:"Connect to a real device for debugging"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dpt dev\n"})}),"\n",(0,o.jsx)(n.p,{children:"When executing the above command, the command line will prompt developers whether to connect a real device for testing."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ dpt dev\n? Debug lua on real device? Yes\n? Please check the device IP: 192.168.5.1 (y/n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Developers need to confirm:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Whether the actual IP of the controller is correct; the default is ",(0,o.jsx)(n.code,{children:"192.168.5.1"})]}),"\n",(0,o.jsx)(n.li,{children:"Whether the SFTP service-related configuration is correct"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For detailed information on the above configurations, please refer to the ",(0,o.jsx)(n.code,{children:"dpt.json"})," configuration file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ip": "192.168.5.1",                              // Controller IP\n  "pluginPort": 22100\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"building-the-plugin",children:"Building the Plugin"}),"\n",(0,o.jsx)(n.p,{children:"After completing the development, debugging, and optimization of the plugin, you can execute the final build work by running:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dpt build\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After the program executes successfully, there will be a ",(0,o.jsx)(n.code,{children:"dist"})," folder and an ",(0,o.jsx)(n.code,{children:"output"})," folder in the current directory."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"dist"})," folder contains the plugin code after this build, allowing developers to check the build results."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"output"})," folder contains a compressed ",(0,o.jsx)(n.code,{children:"zip"})," file named in the format ",(0,o.jsx)(n.code,{children:"<plugin_name>-<version_number>.zip"}),", which is the plugin to be imported for actual use on the client."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},43327:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(22155);const i={},l=o.createContext(i);function r(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);